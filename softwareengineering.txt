testing - If two individual branches pass unit tests, once they're merged, is the result also guaranteed to pass unit tests? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416567/if-two-individual-branches-pass-unit-tests-once-theyre-merged-is-the-result-a
<p>Suppose we have two branches <code>A</code> and <code>B</code> which have been forked from <code>master</code>.</p>
<p>Both branches <code>A</code> and <code>B</code> make some changes and implement some unit tests. They pass all current and new tests, then are merged back into <code>master</code>. For simplicity, there are no merge conflicts.</p>
<p>Is it guaranteed that the resulting code on <code>master</code> will also pass the unit tests?</p>
<p>The reason I ask the question, is I often see GitHub unit tests run automatically once a pull request is made. If they pass, then the code may be merged into <code>master</code>. However, I think <code>master</code> could still end up failing tests if two pull requests break each other? I would have thought
a better solution would be:</p>
<ol>
<li>When a pull request is made, run the unit tests to catch anything egregious.</li>
<li>Have conversations, code reviews etc...</li>
<li>Once the pull request is ready to be merged, do a test merge into <code>master</code>, run the unit tests, if all succeeds, commit the merge.</li>
</ol>
<p>So you never actually commit broken code into master.</p>
<p>No.</p>
<p>The simplest example I've seen is: branch A cleans unused imports in a file. Branch B adds code that actually uses some of the unused imports. Git merges automatically since the lines that were changed were not the same. Code can no longer compile and unit tests can not run.</p>
<p>No. As a counter example, consider branch A adds a unit test that uses reflection to check for a misspelling in an enum. And branch B adds a misspelling. Both pass because a misspelling doesn’t fail a build, in A the test doesn’t fail because everything is spelled right, and in B there isn’t a test to check it. There won’t be any merge conflicts because the enum and its unit test will be in separate areas. But the test will fail once the merge is complete.</p>
<p>Here is an example which neither does require changes to the existing tests itself, nor reflection, nor a failing build, for not giving the wrong impression such cases can only happen under artificial circumstances.</p>
<p>Assume the codebase contains a private function <code>f</code> which is currently not called anywhere (maybe it was in the past, but noone has deleted it). Now in branch A a call to f is added internally in an existing function <code>g</code> during a refactoring. The unit tests for <code>g</code> show that everything works as intended, and <code>g</code>'s behaviour hasn't changed.</p>
<p>At the same time, the devs working on B observed that with some modifications to the behaviour of  <code>f</code> they could reuse it, too, and since <code>f</code> is not used elsewhere from their perspective, they thought the modifications to be safe. Maybe they also added some tests here which cover the new version of <code>f</code>, but that does not really matter. So as a result, in branch B, the behaviour of function <code>f</code> is changed.</p>
<p>To illustrate this with a real example, assume <code>f</code> originally to be a function like this:</p>
<pre><code> // normalize a given angle in degrees to the interval [0, 360[
 double NormalizeAngle(double angleInDegrees)
 {
 // ....
 }
</code></pre>
<p>and in branch B, the behaviour gets changed, making <code>NormalizeAngle</code> deliver values from the interval <code>[-180, 180[</code>.</p>
<p>So before the merge, no tests will fail. After the merge, the tests for function <code>g</code> will fail. Note if in B function <code>f</code>'s signature would have been changed, both branches A and B will compile (assuming a compiled language environment), but after merge not even the build will be successful anymore. If the signature does not change, the compiler will not find this issue, only the unit tests.</p>
<p>Approaching this from a different angle, there's a simple process to ensure that the tests continue passing after merging both branches: a branch must pass CI after being applied to the <em>current</em> target branch before being merged. So when branch A merges, the goalpost for the other branches move to "main branch with A applied to it." To expedite this, most CI systems automatically trigger the CI pipeline for all the other pending branches when merging a branch.</p>
<p>Basically the only way to consistently break this "soft" guarantee would be for the tests to behave differently based on whether it's being run on the source or target branch.</p>
<blockquote>
<p>If two individual branches pass unit tests, once they're merged, is the result also guaranteed to pass unit tests?</p>
</blockquote>
<p>Taking the question at face value, it's very simple to create an example where one branch only tests part of its codebase and has a bug in the untested part. Its unit tests pass, but there is a bug in the code.</p>
<p>Therefore, any test from the second branch that <em>does</em> test this (so far untested) piece of code might pass in its own branch (where it does not have the bug), but not when the bug from the first branch is merged into it.</p>
<blockquote>
<p>The reason I asked the question, is I often see on GitHub unit tests run automatically on each pull request. If they pass, then the code is merged into master. Wouldn't it make more sense to unit test the resulting merge immediately before the actual merge is committed?</p>
</blockquote>
<p><em>This</em>, however, is a much more interesting question.</p>
<p>It makes sense to test the end result of a merge as well, but the way you're proposing to do it is not the best way.</p>
<p>First of all, your suggestion depends on the ability to auto-merge. Without auto-merging, your build process couldn't actually merge the two branches before testing its merged result.<br>
When you can't auto-merge, you have to rely on what is currently already the suggested course of action: merging the master <strong>inside</strong> your feature branch before making your PR.</p>
<p>But let's say you can auto-merge. If you test the merged combined code, then the test failure can be caused by <em>either</em> an issue on the source branch (feature) <em>or the target branch</em> (master).<br>
This means that your PR no longer reviews the feature branch itself, which makes it very hard to spot issues in specific feature branches.</p>
<p>The simplest example here is if a bug does make it onto the master branch, then <em>every</em> PR will fail, except a PR that solves the bug. While this may look appealing from the POV of someone who wants to keep the code clean, it's causing other issues. Every developer will now be troubleshooting their own PR build failure, unaware that there is a single bug causing all of the failures.</p>
<p>That's going to be quite inefficient in terms of having multiple developers independently locate the same bug. So let's say you try to counter that, by having developers confer before investigating a PR failure, so that not everyone tries to solve the same problem without coordinating.<br>
But now, you've creating a point of distraction. Every time some developer makes a mistake in their own feature branch, they're needlessly requiring other developers to confirm that they themselves are not experiencing PR build failures. That, too, is a waste of time and effort.</p>
<blockquote>
<p>Wouldn't it make more sense to unit test the resulting merge immediately before the actual merge is committed?</p>
</blockquote>
<p>This does happen, but it's not the PR that does it. In most CI configurations I've worked in, the master branch goes through the build process whenever a PR gets merged into it. After all, a merge is just a kind of commit, and in a CI/CD environment you should be building your master after every commit made to it.</p>
<p>This breaks down the process in steps where the source of a step failure is easily identifiable.</p>
<ol>
<li>The feature branch PR tests the feature itself. If it fails, the feature branch is flawed. If it passes, the feature itself is considered finished.</li>
<li>Post-merge, the master branch gets built. Any merge issues here will be reported as an issue in the master branch, not the feature branch, as it's not an issue with the feature itself, only its integration of the feature into the master.</li>
</ol>
<hr>
<p>In this answer I assumed you were working on a master branch instead of a separate dev branch.</p>
<p>The distinction between a master/dev branch is irrelevant as far as git merging goes; but this does highlight why the existence of a separate dev branch next to master has added value: dev acts as an <strong>integration branch</strong> which catches any issues with integrating a feature into the main codebase, <em>before</em> it makes its way into the master branch.</p>
<p>No.</p>
<p>The solution to your problem is to take advantage of the fact that git is distributed and run your automated tests against the product of the desired merge locally (ideally on a CI runner) before pushing that merge commit to the shared repository (ideally performed by that CI runner).</p>
<p>Why this isn't the default paradigm for this sort of thing is completely beyond my comprehension.</p>
<p>As the other answer stated, no, passing tests on 2 non-conflicting branches are not enought to say there won't be failures after merging them both. You have plenty of examples.</p>
<p>Let me focus on the second part of the question, the proposed flow, how it may fail and how it might be approached:</p>
<blockquote>
<ol>
<li>When a pull request is made, run the unit tests to catch anything egregious.</li>
<li>Have conversations, code reviews etc...</li>
<li>Once the pull request is ready to be merged, do a test merge into master, run the unit tests, if all succeeds, commit the merge.</li>
</ol>
</blockquote>
<p>This is a nice and sound process and perhaps a great one for a small project. It really ensures no failures in master, and it's quite simple. There is one big issue with it: <em><strong>it doesn't scale</strong></em>. It doesn't scale at all.</p>
<p>With this process you drafted you must serialize the commits, and this gets very costly very fast when the project grows.</p>
<p>For instance, if you have 3 pull requests, you need to test-merge the first one, run all the tests, then update master. Only then you can start testing the test-merge of the second branch, and only after it's in, you can start running the proper tests for the last branch.</p>
<p>This means that if your test suite takes 3 minutes, you can make at most 1 commit in every 3 minutes. That's inconvenient, but feasible. However, if your test suite takes 10 minutes, you are limited to 6 merges per hour at best, 48 merges per work day. A team of 20 people working with such a constraint would spend half their time babysitting the pull requests, and you could end up with a typo fix waiting half a day to be merged.</p>
<p>Worse yet, if your test suit take several hours and you have many thousands of developers working on a single monorepo, producing tens or hundreds of commits per minute... well, you see the problem. Even running the continuous integration after every merge makes little sense in this case.</p>
<p><strong>What is more scalable?</strong></p>
<p>Focus on the continuous integration and quick rollbacks instead of preventing all bad merges from happening. Also track the test failures, so that you can guess with high confidence whether a test failure is caused by the branch, or by the broken master (a smart enough testing tool will annotate them as "already failing", and you may vote to allow merging with this kind of failures). You don't even need to run the integration after each merge (it's the simplest starting point, but doesn't scale to the really huge projects), it may be every few minutes or every hour, depending on how much resources you want to throw at it.</p>
<p>If you detect no failures, everything is fine. If you detect a failure, you can run a binary search over the changes to determine which one caused <em>the specific test</em> to fail - this is relatively cheap, because usually you won't have half the tests fail, just a handful of them.</p>
<p>On top of that, leverage your build system in order to determine the set of builds and tests that actually may be affected by each change, and limit the required test suite to these. Also, as part of CI run these selected tests immediately after the merge, in order to detect the issues as quickly as feasible (separately from the full test suit running once in a while). The determination doesn't have to be watertight - in case you miss a test that is actually affected, the "big" integration testing will still catch it, just a while later, but most of the time you'll get the feedback quite fast.</p>
<p>The flow I described is loosely based on what Google does internally, I assume it's similar to what other big companies do as well. It's worth pointing out that no popular VCSs supports the monorepos as big as theirs, at least not the vanilla version.</p>
<p>In case of Google, the VCS is Perforce based, and it has much stricter rule for conflicts - <em>any</em> other change in the same file is a conflict, no matter how close or far apart are the changes. This eliminates quite a bunch of pitfalls, like those with removed imports - the change would have to be updated and rebuilt, and the issue would show up, similarly to the process you proposed. So this is one more counter-measure - just tighten up the rules for what can be merged to the master. While requiring "only fast-forward changes with passing tests" (i.e. your proposed rule) is unfeasible at scale, "only changes that are fast-forward with regard to affected files" can scale up relatively well.</p>
<p>Interesting question, I gave it some thought and came up with the following situation in which 2 branches which are independently correct, result in a merge which breaks the build.</p>
<p>Suppose in the 2 branches a function/procedure with same name and signature is added to a class. However this is done in different locations or even different files. The resulting merge will result in a class with 2 identical functions/procedures and will therefore give a compile-error.</p>
<p>Another problem scenario is that the original program performed a safety check in both a private function, and in its calling code.  Branch A removes the check from the function, and branch B removes it from the calling code.  Both branches will perform the safety check once, would for most purposes be an improvement over calling it twice, but merging the changes will cause the safety check to be omitted altogether.  A test for safety-check behavior would thus pass on both branches, and the merged code would <em>appear</em> to work fine if the checked condition never arises, but code would no longer be protected against the condition that was supposed to be guarded by the safety checks.</p>
<p>Let's look on how to prevent the problem. As mentioned in the question, CI (typically) reruns after every commit to the default branch, including merges. Some of the answers already explain how things can break.</p>
<p>Some other answers suggest a <code>dev</code> branch and <code>fast-forward</code> the main branch only when the CI is stable on <code>dev</code>. But this would require additional manual intervention and can become a hassle on a big project.</p>
<p>And then there is the <a href="https://bors.tech/" rel="nofollow noreferrer">Bors-ng</a> tool:</p>
<blockquote>
<p>Bors is a GitHub bot that prevents merge skew / semantic merge
conflicts, so when a developer checks out the main branch, they can
expect all of the tests to pass out-of-the-box.</p>
</blockquote>
<p>Basically, accepted pull requests are merged with the main branch in a temporary branch. When CI passes, the main branch gets Fast Forwarded to the temporary branch. It is quite feature complete and supports reviewers, batching of builds, queuing (when it gets really busy) and (I believe) most CI providers.</p>
<p>Disclaimer: I have no affiliation with this product, just a happy user.</p>
<p><em>Of course</em> there is no guarantee. The examples are legion.</p>
<p><strong>But.</strong></p>
<p>It is not unreasonable to assume that <em>unrelated,</em> isolated changes are unlikely to break anything. Performance improvements in a backend algorithm are unlikely to change the database interface. This is the same assumption that's underlying the paradigm of unreserved checkouts/parallel development of which git is a prime example: Hopefully the team communicates well and organizes work packages in a fashion so that they do not conflict, or, if that is impossible, organizes conflicting work so that the arising problems are predictable and handled proactively. (Then, ideally, we <em>know</em> that a naive merge is broken.)</p>

java - What is the utility and advantage of getters & setters especially when they are merely used to read and assign values to properties of an object? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416386/what-is-the-utility-and-advantage-of-getters-setters-especially-when-they-are
<div>
            <aside class="s-notice s-notice__info js-post-notice mb16" role="status">
        <div class="grid fd-column fw-nowrap">
            <div class="grid fw-nowrap">
                <div class="grid--cell fl1 lh-lg">
                    <div class="grid--cell fl1 lh-lg">
                        <b>Closed</b>. This question needs to be more <a href="/help/closed-questions">focused</a>. It is not currently accepting answers.
                        
                    </div>
                </div>
            </div>
        </div>
            <hr class="my12 outline-none baw0 bb bc-powder-400">
        <div class="grid fw-nowrap fc-black-600">
                <div class="grid--cell mr8">
                    <svg aria-hidden="true" class="svg-icon iconLightbulb" width="18" height="18" viewBox="0 0 18 18"><path d="M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z"></path></svg>
                </div>
            <div class="grid--cell lh-md">
                <p class="mb0">
                    <b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href="/posts/416386/edit">editing this post</a>.
                </p>
                    <p class="mb0 mt6">Closed <span title="2020-10-04 00:53:43Z" class="relativetime">24 days ago</span>.</p>
            </div>
        </div>
            <div class="mt24 grid gsx gs8">
                    <a class="s-btn s-btn__outlined grid--cell js-post-notice-edit-post" href="/posts/416386/edit">
                        Improve this question
                    </a>
            </div>
</aside>

    </div>

<p>I’m still really new to learning to program. Just learning the syntax for a few programming languages at the moment.</p>
<p>The courses I viewed for C# and Java touched only very briefly on getters &amp; setters and it still didn’t make an awful lot of sense to me. So I researched them further and found that the whole subject of getters &amp; setters is a lot more debated than I could believe. For every argument &amp; example both for and against getters &amp; setters there was a counter argument, saying that it was wrong, the code was a bad example etc. and I still didn’t know who to agree with or even fully grasp the jargon behind it.</p>
<p>So I’m really not sure what to go for at the moment. So I’m going to post my take on what getters &amp; setters really are given what I’ve read and if there’s anything I’ve got wrong then please tell me. Then I have a few more questions that I haven’t found any answers for anywhere.</p>
<p><strong>My take on getters &amp; setters</strong></p>
<p>FOR:</p>
<ul>
<li><p>Getters and setters are methods declared within a class and applied to fields within said class, and control what other classes can access and modify these fields.</p>
</li>
<li><p>They’re used on fields which need to be accessed from outside their class, but at the same time cannot let anything have access other than what needs access.</p>
</li>
<li><p>When programmers talk about “if you make a field public then ANYONE can have access to them” by anyone they’re not necessarily talking about hackers or the user of your finished program. They’re talking about any other programmers who are working on the same program (or yourself) creating something which accidentally creates side effects which modify that class. Then you not being able to work out what is causing that change.</p>
</li>
<li><p>As well as controlling access they can do other things such as validate any input to the field before it is added (Mike Dane aka Giraffeacademy has used the example several times that a movie can only have 3 age ratings, so adding into the setter a method which checks the rating of a movie before it is added is a good side effect of a setter). In the same example, it can also improve the maintainability of your program, for example if a fourth rating is added, you can modify any objects where the new rating applies to just by adding it to the setter, rather than going through each movie individually.</p>
</li>
</ul>
<p>AGAINST</p>
<ul>
<li><p>Many programmers nowadays are strongly against the use of getters and setters. They argue that it ruins the encapsulation of your objects and makes code noisy and unreadable. Also that they encourage programmers to think of objects as data structures.</p>
</li>
<li><p>I’ve seen some arguments that they are now somewhat obsolete as some programming languages such as Python, which doesn’t need to use getters &amp; setters. Also some IDE’s make it easy to see where side effects are taking place.</p>
</li>
<li><p>The main argument I’ve seen against them is that they’re just poor design. Code and classes should be clean and organised in a way that fields are only accessed outside the class when it absolutely needs to be, and getters and setters should only be used as a last resort.</p>
</li>
<li><p>An idea I saw recently is that you should start off making every field you create private. Then find everything which needs to be accessed outside the class and if there’s no other way around it, add a getter and/or setter to it.</p>
</li>
</ul>
<p>The final, neutral argument I’ve seen is that you shouldn’t be adding things to your code that you don’t understand or don’t know if you’re going to need or not. That I absolutely agree with. But obviously I need to know if they’re going to be useful to me or not when I actually create something.</p>
<p>So if I’ve got anything wrong then please let me know, and I still have a few questions:</p>
<ul>
<li><p>What parts of your program would you actually use getters and setters on? The examples I’ve seen online use classes such as ‘Dog/Ball’ and ‘Person’ which really aren’t much use to me. I’m thinking you would use them if you had a class for ‘Accounts’ and a different class for ‘Settings’.. the settings class would need to access the Account’s user name if the username requested to change it.. right?</p>
</li>
<li><p>Going with that example, if getters and setters are created to prevent someone from being able to change a variable through a side effect, what kind of code could actually change a user’s name as a side effect accidentally? Surely the only kind of areas in your program that could modify an accounts username are setUsername, displayUsername and changeUsername, and nothing else would ever need to go near those variables.</p>
</li>
<li><p>Given the debate I’ve found surrounding getters &amp; setters why do courses and tutorials touch so briefly on them only just teaching you the syntax for them, and not arguing the cases for and against or even providing actual real world examples? (See note before about dog/ball). Are they too biased of an opinion? Or am I just looking into one topic way too much?</p>
</li>
</ul>
<p>As I said I’m still so new to programming, so I’m probably either too inexperienced or thinking about it way too much. I just want to be absolutely clear on what I’m adding/not adding to my programs before I release them to the world.</p>
<p>Any help much appreciated. Have a good day.</p>
<blockquote>
<p>I’m still really new to learning to program. Just learning the syntax for a few programming languages at the moment.</p>
</blockquote>
<p>And that is actually the problem here - you approach this way too much from a syntactical point of view. What you need to learn first is solving problems with programs. When the problems get larger, the programs will get larger and require more structure. That will bring you to a point where you need</p>
<ul>
<li><p>data structures and data abstractions</p>
</li>
<li><p>functional abstractions</p>
</li>
<li><p>functions which operate on specific data structures, so the data structures might become classes, and the functions become member functions of that classes.</p>
</li>
</ul>
<p>At that point, you will have to learn about how to design the public API of a class to create a good abstraction, for reaching a certain goal. You will also start to learn why making members "private" by default is a really good idea. If you work in some context of a real problem, you will know the precise requirements for your classes and their API, so you can decide which parts / functions / properties can stay private, and which not.</p>
<p>That will be the point in time where you may notice a very frequent requirement for classes: getting external access to some state information of the object (either read access - for which a getter is fine, or also write access, for which an additional setter will be required). Such state often corresponds to the content of a private member variable. However, that is not mandatory,  getters and setters can also deliver (or change) values/state which are not stored directly in a member variable, but can be derived or calculated indirectly.</p>
<p>So in short: you do not decide about using or not using getters and setters by a pro/con list. Getters and setters are just tools which help you to solve some problems (specifically the problems you listed in your FOR section). One decides about their usage depending on if the actual problem requires them, and if they fit well to the kind of abstraction one wants to build by a class.</p>
<p>Getters and setters allow the programmer to change the implementation of a class later on more easily. If the class is used elsewhere, and if there are no getters and setters, then the programmer has to change <em>every other class</em> which uses it. With getters and setters, the using classes can remain unchanged.</p>
<p>Imagine you have a class called <strong>BankAccount</strong> with a balance and a transaction history. There is another class which retrieves BankAccount objects from the database.</p>
<p>You find out that your program is too slow. After some profiling, it is the transaction history which takes a long time to load, yet almost all uses of the bankAccount query the balance only. Fortunately, there is a getter.</p>
<pre class="default s-code-block hljs csharp"><code><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Transaction&gt; <span class="hljs-title">getTransactionHistory</span>(<span class="hljs-params"></span>)</span> { 
    <span class="hljs-keyword">return</span> transactionHistory; 
}
</code></pre>
<p>You can simply change this getter and the way the bank account is initially loaded.</p>
<pre class="default s-code-block hljs csharp"><code><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Transaction&gt; <span class="hljs-title">getTransactionHistory</span>(<span class="hljs-params"></span>)</span> { 
    <span class="hljs-keyword">if</span> (transactionHistory == <span class="hljs-literal">null</span>) {
        loadTransactionHistory();
    }
    <span class="hljs-keyword">return</span> transactionHistory; 
}
</code></pre>
<p>People who use your class don't see a difference, except that the initial loading got much faster and the subsequent call to the getter got slower.</p>
<p>Or you find that saving BankAccount objects back into the database takes a lot of time, even if most of the time nothing has changed. Fortunately, there is a setter on both balance and transaction history.</p>
<pre class="default s-code-block hljs csharp"><code><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> balance</span>)</span> { 
    <span class="hljs-keyword">this</span>.balance = balance;
}
</code></pre>
<p>You simply add a new field, a boolean called isDirty.</p>
<pre class="default s-code-block hljs csharp"><code><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> balance</span>)</span> { 
    <span class="hljs-keyword">this</span>.isDirty = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">this</span>.balance = balance;
}
</code></pre>
<p>And when it comes to persisting the object again, if <code>!isDirty</code> you can skip the persisting.</p>
<p>Getters and setters make accessing fields into their own methods. When you're in Java you have to do this up front or when you decide to do it later you change the interface. In C# they have lovely properties so your clients won't care when you decide to make your public fields private.</p>
<p>These let you detect when something is accessing your fields. Public fields can't do that.</p>
<p>This is why getters and setters exist. It's certainly not that they provide encapsulation. They don't. They just let you detect when someone is breaking your encapsulation. They don't make you object oriented. They don't enable polymorphism. But they still exist for a reason.</p>
<p>Use getters when you can't move the method that needs access into the class with the data. If you can you should under OO. This happens when you're up against a boundary like code you don't control. You can also use a collection in these cases but using getters provides type safety that collections don't offer. When up against the boundary problem a Data Transfer Object (DTO) full of getters is still better than a pile of public fields.</p>
<p>Use setters when you have to mutate the class during its lifetime. It's better to be immutable but somethings can't be. Deserializers used to require this but most no longer do. Immutable objects are great but try to get two nodes to point at each other without a setter.</p>
<p>Much as I hate how they break encapsulation I have to admit they sometimes have their uses. I use them in behaviorless DTOs. I keep them out of my behavior objects. I don't like hybrids that try to be both.</p>
<hr>
<blockquote>
<p><strong>My take on getters &amp; setters</strong></p>
<p>FOR:</p>
<ul>
<li>Getters and setters are methods declared within a class and applied to fields within said class, and control what other classes can access and modify these fields.</li>
</ul>
</blockquote>
<p>No, access modifiers (public, private, protected, default) do that on their own. This doesn't explain the existence of getters and setters.</p>
<blockquote>
<ul>
<li>They’re used on fields which need to be accessed from outside their class, but at the same time cannot let anything have access other than what needs access.</li>
</ul>
</blockquote>
<p>No, getters and setters have no idea what is accessing them. Well, unless you're peeking at the call stack with some reflection magic.</p>
<blockquote>
<ul>
<li>When programmers talk about “if you make a field public then ANYONE can have access to them” by anyone they’re not necessarily talking about hackers or the user of your finished program. They’re talking about any other programmers who are working on the same program (or yourself) creating something which accidentally creates side effects which modify that class. Then you not being able to work out what is causing that change.</li>
</ul>
</blockquote>
<p>This is correct. Information hiding, as this is called, isn't about security (unless someone adds some toys that make it that way). This is about protecting a chunk of code from being used any old crazy way rather than through its proper interface. That way you know what you're breaking when you change it. This is why maintaining real encapsulation is important. Access modifiers encourage that by making clear what is private and what is public. "Anyone" really just means coders working on other classes.</p>
<blockquote>
<ul>
<li>As well as controlling access they can do other things such as validate any input to the field before it is added (Mike Dane aka Giraffeacademy has used the example several times that a movie can only have 3 age ratings, so adding into the setter a method which checks the rating of a movie before it is added is a good side effect of a setter). In the same example, it can also improve the maintainability of your program, for example if a fourth rating is added, you can modify any objects where the new rating applies to just by adding it to the setter, rather than going through each movie individually.</li>
</ul>
</blockquote>
<p>Validation is something your constructor can do. You don't need it in setters if you don't have them. Anything that might invalidate your state should trigger validation. Limit what can invalidate you.</p>
<blockquote>
<p>AGAINST</p>
</blockquote>
<blockquote>
<ul>
<li>Many programmers nowadays are strongly against the use of getters and setters. They argue that it ruins the encapsulation of your objects and makes code noisy and unreadable. Also that they encourage programmers to think of objects as data structures.</li>
</ul>
</blockquote>
<p>I'm strongly against brainless use of getters and setters on every field. It ruins object orientation because there's no polymorphism. I want to tell something to do something and not have to know exactly what it is or what it will do. I want something else to worry about that. I don't get that if I poke my nose into every private thing that exists.</p>
<blockquote>
<ul>
<li>I’ve seen some arguments that they are now somewhat obsolete as some programming languages such as Python, which doesn’t need to use getters &amp; setters. Also some IDE’s make it easy to see where side effects are taking place.</li>
</ul>
</blockquote>
<p>What python doesn't use is enforced access modifiers. They just mark their private fields with names that start with underscores. "We're all adults here" means you'll behave and respect that right?</p>
<blockquote>
<ul>
<li>The main argument I’ve seen against them is that they’re just poor design. Code and classes should be clean and organised in a way that fields are only accessed outside the class when it absolutely needs to be, and getters and setters should only be used as a last resort.</li>
</ul>
</blockquote>
<p>Properly encapsulated behavioral objects shouldn't let you know that those fields even exist. They provide an interface that you use to tell them to do things and they do it. They might use those fields to make decisions but you don't need to know that.</p>
<blockquote>
<ul>
<li>An idea I saw recently is that you should start off making every field you create private. Then find everything which needs to be accessed outside the class and if there’s no other way around it, add a getter and/or setter to it.</li>
</ul>
</blockquote>
<p>No. This is just pretending it's OK as long as you feel guilty about it. It's also promoting the idea that once a field is public it must stay that way. Learn to move what needs the field into the object that has it. If the field value must be sent somewhere else do the sending yourself. Don't let just anyone in here to get it.</p>
<blockquote>
<p>The final, neutral argument I’ve seen is that you shouldn’t be adding things to your code that you don’t understand or don’t know if you’re going to need or not. That I absolutely agree with. But obviously I need to know if they’re going to be useful to me or not when I actually create something.</p>
</blockquote>
<p>Add getters and setters to Java to keep people from directly accessing fields (thus, offer no public fields). C# has properties that makes that a non issue. But if you're trying to be object oriented try to keep people from touching your fields at all.</p>
<blockquote>
<ul>
<li>What parts of your program would you actually use getters and setters on? The examples I’ve seen online use classes such as ‘Dog/Ball’ and ‘Person’ which really aren’t much use to me. I’m thinking you would use them if you had a class for ‘Accounts’ and a different class for ‘Settings’.. the settings class would need to access the Account’s user name if the username requested to change it.. right?</li>
</ul>
</blockquote>
<p>Getters and setters solve problems that are difficult to realistically recreate in an example.</p>
<blockquote>
<ul>
<li>Going with that example, if getters and setters are created to prevent someone from being able to change a variable through a side effect, what kind of code could actually change a user’s name as a side effect accidentally? Surely the only kind of areas in your program that could modify an accounts username are setUsername, displayUsername and changeUsername, and nothing else would ever need to go near those variables.</li>
</ul>
</blockquote>
<p>Getters and setters are not created to prevent changing variables through side effects. They're created so that you can detect that variables have been changed or read.</p>
<blockquote>
<ul>
<li>Given the debate I’ve found surrounding getters &amp; setters why do courses and tutorials touch so briefly on them only just teaching you the syntax for them, and not arguing the cases for and against or even providing actual real world examples? (See note before about dog/ball). Are they too biased of an opinion? Or am I just looking into one topic way too much?</li>
</ul>
</blockquote>
<p>Probably because the debate is still raging. They prefer to teach people what they can prove.</p>
<p>I am one of the software engineers who advocates suspicion for getters and setters, <em>but only because of how they are used today.</em> The reason I object is mainly that application programmers have developed the bad habit of generating getters and setters for every field without considering whether or not each getter or setter is necessary.</p>
<p>Furthermore, as you mentioned, the default access modifier for generated getters and setters, by default in many IDE's, is public.</p>
<p>Some languages do not even provide access control to fields (like Python) and in others like Java it is common to use libraries like Lombok to short-circuit type-safety and encapsulation.</p>
<p>In some cases, application developers literally could change many classes over to public fields, delete all the getters and setters, and have equivalent functionality to what they have today while removing hundreds of lines of potentially buggy code from their applications.</p>
<p>Both the existence of unnecessary getters or setters, and too-relaxed access modifiers on them, have <strong>created a significant percentage of the bugs I have seen in my seventeen-year career</strong>.</p>
<p>Nevertheless, as others have pointed out, getters and setters themselves are a different topic than access control and immutability, which are both more important to good application design.</p>
<p>A library developer will pay the most attention to getters and setters because they pay the highest price for problematic designs. In their context, even access to read-only fields must be controlled through getters because at least then they can keep one consistent library API while being able to modify the implementation underneath as necessary.</p>
<p>Thankfully, the good news is that most languages are evolving with new higher-level constructs that provide the ability to enforce good design for various use cases. Examples include C# properties and Scala case classes.</p>
<p>In short: good object-oriented design is subject to the context of many factors (application vs. library, available language features, open-source vs. private) and there is no single dogma that applies in all cases.</p>
<p>When you're learning a new language and you're not sure about programming style, it might be good idea to take a look at the core libraries of the language. They might not always be a perfect model, but they're most likely way better than most of the code you'll see elsewhere.</p>
<p>Adopting a similar programming style will be beneficial. Your code will be easy to understand for anyone who is familiar with the language. If fields are not directly exposed in core libraries, then you could avoid exposing fields too <em>just to follow the convention</em>. Conventions are very important.</p>
<p>Sticking to the style of important libraries might be beneficial even when you're experienced enough to form your own opinion and even when you'd personally prefer an alternative style. If really want to abandon conventions, you can always do it in a private hobby project.</p>
<p>The main difference between using <em>setters/getters/direct access</em> and <em>properly encapsulated objects</em>, is a design question not a syntactical one.</p>
<p>The former ones are basically a holdover from our procedural past, that we can't seem to shake. It is much <em>easier</em> to imagine a set of instructions on some data that the CPU has to execute. This thinking results in data structures and algorithms. Therefore those who think this way will often <em>need</em> access to data and usually can't imagine how else they could write a program.</p>
<p>Object-orientation is about decomposing a problem into individual <em>agents</em> (objects) that <em>do</em> stuff. Not just any (technical) stuff, but business stuff, something that fulfills some requirement that is important for users/business people. This is why it is hard to have examples, because the methods you put in an object are determined by your requirements, not the object itself. A <code>Book</code> doesn't automatically have <code>Pages</code> or even a <code>title</code>, only if there is a functionality that needs it. And this functionality needs to be <em>in the <code>Book</code></em>, therefore there will be no need to access those from the outside.</p>
<p>From the above it follows, we only provide access to pure data (setter/getters/direct access) if we don't, or even can't know what the supported functionality should be. This happens on the "edges" of your code. For example you are writing an http-client, you'll (probably) have to provide the raw content to the caller, because you don't (can't) know how that will be used. <em>Inside</em> a software, like a web-application or similar this should never happen.</p>
<p>I think it is awesome that you think about these things. And remember, most resources out there still didn't quite made the leap to object-orientation, so you'll have to use your own judgement, and later, you own experience.</p>
<p>I think you're combining two things here, using getters/setters and making a field public. There are essentially three options here:</p>
<ul>
<li>add a private field</li>
<li>add a public field</li>
<li>add a private field with getter/setter</li>
</ul>
<p>As a general rule fields should only be public if necessary, and you shouldn't expose any implementation details that the user of the class doesn't need to know by making fields public unnecessarily. Adding a getter/setter by definition also makes a field public, and some of your arguments are really about that part. But that is also independent of using a getter/setter, you have the same issues if you just make the field public.</p>
<p>I'm assuming C# here as I'm not entirely sure about the details in modern Java in this regard. C# has automatically generated getters and setters, which does minimize the boilerplate you'd usually have for trivial getters and setters that simply set a private field. In this case you would generally prefer to use autogenerated getters/setters instead of a public field. It adds hardly any noise, and it gives you the option to change the implementation without changing the public interface of your class and potentially breaking code using it.</p>
<p>In general you need to be careful to not do anything in getters and setters that a reasonable programmer would find surprising. Validation is fine, side effects that e.g. perform IO or affect other parts of your object are probably a very bad idea.</p>
<p>In addition to what has been said by others, I will add that there are two broad categories of uses I see for Java classes in my applications:</p>
<ul>
<li>classes that encapsulate program logic about a certain area of the program (like the objects you read about in your programming textbooks!)</li>
<li>classes that exist only to hold data about an entity in the program</li>
</ul>
<p>The latter kind have names like Customer, or Product, or Item, are generally filled up with data by reading data out of a database and creating one instance for each row of the result, or are filled in by a user with a web form.  The data, once entered, is rarely changed, and there's little to no logic within the class.</p>
<p>For the first type, the classes that encapsulate program logic, generally your fields should be private and you shouldn't have getters and setters for the fields, except maybe for injecting dependencies or setting configuration options.  This is real object-oriented code and you should take care to design a good public API.</p>
<p>For the second type, these are <strong>dumb data structures</strong> and all you need to do is (1) define the fields and (2) use your IDE to automatically create getters and setters for all of them.  (Typically the frameworks and libraries you employ will require getters/setters.)  You will hardly ever touch these again, although occasionally it becomes handy to modify a getter or setter for example to do some string formatting or to change a data type. It is pointless to worry about applying object-oriented design principles or design patterns to these cases -- they aren't really what the philosophers of those fields considered to be "objects" anyway.</p>
<p>As others have pointed out, you are in places conflating <code>access control</code> (public, private...) with the question of whether to implement <code>getters and setters</code> (which, depending on the language, can themselves take access control modifiers). While these are of course related, it's important to be clear which you are focusing on at any point.</p>
<p>However, between the lines of that discussion there are also other, more fundamental questions that need answering:</p>
<blockquote>
<p>What parts of your program would you actually use getters and setters
on? The examples I’ve seen online use classes such as ‘Dog/Ball’ and
‘Person’ which really aren’t much use to me. I’m thinking you would
use them if you had a class for ‘Accounts’ and a different class for
‘Settings’.. the settings class would need to access the Account’s
user name if the username requested to change it.. right?</p>
</blockquote>
<p>No. Not necessarily, anyway, and I would say probably not. But the question of how to update the username is one you would first want to consider as part of your overall design, and in the context of your overall data model.</p>
<p>For example, let's say there is a business requirement to maintain settings for our product (a website). These might be configuration settings (for administrators to set options controlling how the website behaves when users edit accounts) or they might be user settings (enabling website users to choose to view the site in a different language whenever they visit, or to choose a preferred navigation style).</p>
<p>And let's say there is also a business requirement for both users and administrators to edit Account records, changing such things as email address, postal address, telephone number and username. Now, it could be that in your data model, the Account field values (email address, username...) are defined as "settings" in some global repository (cue Windows Registry designers!). Quite likely though, your data model defines the Account field values not as "settings" but as properties of the Account entity. And from here, the question would not be whether to implement a getter and setter for username. The question would be, "Given that we're using object orientation here, and given the relationship between the Account entity and the entities that need to interact with it, what interface should Account expose to support these interactions? Because here's the thing: the answer <em>might</em> be "make username public", but actually it might be "provide an UpdateUsername method (or even an UpdateAccount method) that takes as parameters both the updated value(s) and some additional information needed any time an account is updated."</p>
<p>Like Dog and Ball, even Account doesn't lend itself well to examples that are universally right and wrong.</p>
<p>In summary, focusing on getter and setters and questioning them as you have done is valuable—as are many of the points on this subject noted in other answers. But don't just think about whether to expose a field directly or via a getter/setter; think first about whether it should even <em>be</em> exposed. Encapsulation is key here: which entities should be responsible for implementing the business logic, and hence which entities should have the low-level knowledge that a certain business rule is met by updating a certain field? Username is pretty clear but in other cases the meaning of a field can be less clear, or may be subject to subtle or complex business logic. The caller's view should be abstracted to a higher level that doesn't assume knowledge of the low-level implementation details. In such cases, exposing a field—whichever way you do it—is not sufficient.</p>
<p>You mentioned the thing about making fields public then anyone can mess with your data -- that's true, but the missing thing is that a lot of times you don't want a setter, just a getter, and in some languages (like Java) there's not good ways to make fields public and immutable.</p>
<pre class="lang-java s-code-block hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{

  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> a; <span class="hljs-comment">// Anyone can see this, but they can also *change* it.</span>

  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> b; <span class="hljs-comment">// They can't edit this since it's final!</span>

  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> List&lt;Integer&gt; intList; <span class="hljs-comment">// Even though this is final it is still mutable.</span>

  <span class="hljs-comment">// But using a getter we can return a read-only copy of the list to accomplish this.</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getIntList</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> Collections.unmodifiableList(intList);
  }
}
</code></pre>
<p>Often times we think of getters and setters as simply returning the value as-is or setting the value as-is, and in many cases that's all it is. Sometimes you need more fine grained control though.</p>
<p>Also it helps to let you change your implementation details. Say you have a method that returns the date as "YYYY-MM-DD".</p>
<pre class="lang-java s-code-block hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> </span>{
  <span class="hljs-keyword">public</span> String year;
  <span class="hljs-keyword">public</span> String month;
  <span class="hljs-keyword">public</span> String day;

  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateString</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> year + <span class="hljs-string">"-"</span> + month + <span class="hljs-string">"-"</span> + day;
  }
}
</code></pre>
<p>But then you find out about <a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html" rel="nofollow noreferrer"><code>LocalDate</code></a> class and thing it's a much simpler way to store it so you change your class to this.</p>
<pre class="lang-java s-code-block hljs"><code><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> </span>{
  <span class="hljs-keyword">public</span> LocalDate date;

  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getYear</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> getDateString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMonth</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> getDateString().substring(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>);
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDay</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> getDateString().substring(<span class="hljs-number">8</span>, <span class="hljs-number">10</span>);
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateString</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> date.toString();
  }
}
</code></pre>
<p>This design is cleaner, and let's hypothetically say there's more methods that makes it even more useful for whatever reason. But oh no, you make this change and push the code and now one of your teammates is complaining about a compilation error. You had the fields as public before. Their code relied on it. Now you have to argue about if you need to keep the fields or if they have to change their code. But if you had not exposed the implementation details you would not need to worry. Everything that is public is essentially like a contract about how your code will work.</p>
<blockquote>
<p>I still don’t fully understand getters &amp; setters
I’m still really new to learning to program. Just learning the syntax for a few programming languages at the moment.</p>
</blockquote>
<p>Getters/setters/fields/function are all implementation details around getting and changing state. Unless you are designing or working on a public api, I would recommend that you simply follow the practice of whatever project you are working on or the guidance of teacher/co-workers.</p>
<p>Part of the reasons to use them or not are implementation details of the language, tools and libraries of the project.  If you need to deserialize a string to a class and the deserialization library only uses properties, well, the class needs to have properties.</p>
<p>So, there’s no one size fits all answer, and you don’t have a strong opinion, use what those around you are using, and be willing to do so on whatever project
you are working on, until you do develop a strong opinion.</p>
<p>In C#/WPF, if you want to use data binding, you have to use properties. It doesn't work with fields.</p>

terminology - Software bug vs. software corruption - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416361/software-bug-vs-software-corruption
<p>While investigating <a href="https://en.wikipedia.org/wiki/Qantas_Flight_72" rel="noreferrer">Wikipedia article on Qantas Flight 72</a> I've found "<a href="https://en.wikipedia.org/wiki/Qantas_Flight_72?wprov=sfla1#Potential_trigger_types" rel="noreferrer">Potential trigger types</a>" section that says (emphasis mine):</p>
<blockquote>
<p>A number of potential trigger types were investigated, including <strong>software bugs</strong>, <strong>software corruption</strong>, hardware faults, electromagnetic interference and the secondary high-energy particles generated by cosmic rays.</p>
</blockquote>
<p>I wonder if there is any distinctive and ultimate difference between "bug" and "corruption" (if yes, then what is the difference) or is this just an article's wording and nothing else?</p>
<p><strong>Software corruption is the contrary of software integrity.</strong>  It's the same thing as <a href="https://en.m.wikipedia.org/wiki/Data_corruption" rel="noreferrer">data corruption</a>, except that the data is the software code.</p>
<p>It can affect:</p>
<ul>
<li>the software binary stored in memory: binary codes of software instructions are altered for example because of physical interference (“please switch off electronic devices during take-off and landing”), hardware defects (memory chip), malicious activities (e.g. <a href="https://en.m.wikipedia.org/wiki/Row_hammer" rel="noreferrer">row hammer</a> vulnerability), or software bugs (i.e. as a consequence of a buffer overflow).</li>
<li>the software binary before it is loaded in memory, i.e. the executable file stored  in a file system (e.g. SSD memory, hard disk, ...) or transiting via the network (e.g. loaded from a remote file server).</li>
<li>the software source code before the executable is produced: the source code is data like any other, that can be corrupted in the same situation as any data. A typical example is when a software company’s source code repository gets hacked (accidental cases generally prevent compilation and have a very limited impact)</li>
</ul>
<p>Note that “software corruption” may be used <a href="https://stackoverflow.com/a/9580603/3723423">ambiguously</a> to mean corruption caused by the software instead of corruption of the software itself.</p>
<p>You can fix corruption by restoring from a good back up. Corruption means some of the bits somehow got changed from what they were meant to be.</p>
<p>You can fix a bug* by doing more development and redeploying. Here the bits are what they were meant to be. They just don’t do what we need them to do.</p>
<p>*Of course this assumes that bug means a defect in source code, not a <a href="https://www.computerworld.com/article/2515435/moth-in-the-machine--debugging-the-origins-of--bug-.html" rel="noreferrer">moth</a> stuck between relay contacts.</p>
<p>A bug is when a software does exactly what the programmer told it to do, instead of what the programmer wanted it to do.</p>
<p>A corruption is when a software does something else than what the programmer told it to do, possibly due to hardware failure, or other problems not directly related to software development.</p>
<p>Presumably what they mean by "software corruption" is unintended changes to the contents of an executable file due to things like a failure of the storage media.</p>
<p>A "bug" would mean that the binaries are the same as the originals which were provided by the software vendor or developer, but that there was some programming error which means they don't behave exactly as intended.</p>
<p>I write a program, it gets compiled, sent to you, you install it on your computer. But a few bits have changed on the way. That is software corruption.</p>
<p>A bug is a mistake made by a software developer.</p>
<p>Corruption is not a mistake by a developer; it is when something alters the program after (or during) delivery — even something accidental/benign like failing storage or network transmission error.</p>
<p>Since 2003, the term <em>corruption</em> in software has also been associated with <strong>undesirable coupling between two software modules</strong>. <a href="https://www.wiley.com/en-br/Patterns,+Principles,+and+Practices+of+Domain+Driven+Design-p-9781118714706" rel="nofollow noreferrer">DDD</a> prescribes the creation of an <em>anticorruption layer</em> (ACL) between two software systems (or "bounded contexts" in DDD terms). If system A needs to interact with system B, and B's API uses different design standards, data structures and formats, an ACL may prevent elements of B's API to spread and "corrupt" components in A.</p>
<p>This use of the term "corruption" was clearly not the intent in the Qantas Flight 72 article, but it helps to clarify common terminology. Or so I hope.</p>

programming practices - Is it ok copying code from one application to another, both belonging to the same repository, to keep them independent? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416574/is-it-ok-copying-code-from-one-application-to-another-both-belonging-to-the-sam
<p>Given a repository which contains two different applications <code>A</code> and <code>B</code> (e.g. bootloader and RTOS), is it ok to copy source code from <code>A</code> to <code>B</code> in order to avoid dependencies (<code>include</code>'s, adding <code>A</code> source files to the <code>B</code> compilation) between them, so they stay completely independent both at build-time and runtime?</p>
<p><strong>Note:</strong> In addition, let's suppose that the logic to be copied from <code>A</code> is private (that is, it's only meant to be used by certain internal functions in <code>A</code>)</p>
<p>It is acceptable if the copied code <strong>can change independently</strong> from the original code.</p>
<p>If you are copying code and every future change has to be maintained in two different code bases, you could better create a shared library. Then both applications have a dependency on the library, but not on each other.</p>
<p>In theory it's the best practice to put any significant common piece of code in a separate library that both applications use, rather than duplicating the code across both applications.</p>
<p>In reality I would say the choice is a trade-off between:</p>
<ul>
<li><p><strong>Avoid code duplication</strong></p>
<p>Having duplicated code means there's more code that needs to be understood to understand what's going on in the applications. You also need to maintain both pieces of code, which means duplicating changes to the code. Even copying a one-line method might require both versions to be changed, whereas you can copy entire packages without ever having to change them. If some bit of code has been stable and unchanged for years, that might be a decent sign that it's not going to need changes any time soon (although that's still not a great reason to duplicate it, and extending the scope of what it's used for is a good way to find things that require changes).</p>
<p>If you copy the code, but then end up significantly changing it so it doesn't resemble the original all that closely, this might be a sign that you simply have two applications that do similar things and there may not be anything you can really separate out. It may also be a sign that you need to reconsider what your classes and applications do and how you structure them.</p>
</li>
<li><p><strong>A library that makes sense out of context</strong></p>
<p>If you have, for example, a general-purpose <code>Array</code> class, that can make sense in a library (assuming you're using a language that doesn't provide that built-in, obviously). If, on the other hand, you have some class that only makes sense given the specifics of your applications, that's not a great candidate for the library.</p>
<p>Generally you want a library to have some well-defined purpose or set of functionality it provides (like say to provide common data structures). If the class just does some intermediate step that requires something each of your applications would do first, that probably also shouldn't be in a separate library.</p>
<p>You also don't really want every change you make in either the application or the library to also require a change to the other because the two are too closely linked (but of course changing the public interface of classes in the library is going to require changes to applications using it).</p>
</li>
<li><p><strong>The effort of maintaining a separate library</strong></p>
<p>This shouldn't matter much if the library has a significant piece of code and that's distinct from your applications.</p>
<p>But if you just have like one small file in there, that's probably not going to make much sense as a separate library.</p>
</li>
</ul>
<p>I would try to avoid having one application import from the other, unless you have a particularly compelling argument in favour of that.</p>
<p>A one-time copy is reasonable, but in my experience, if you don't set up a pattern for sharing code between builds, you will end up copying a lot more.</p>
<p>I used to work in a code base that used copying regularly for common code. One time I made some changes in code, but they didn't take effect. I discovered I was working in the wrong copy, so I made my changes in another place. Oops wrong copy again. That got me curious, and I found seven <em>exact</em> copies of that same code. Later, I did an analysis and found that a solid majority of our source files were exact duplicates of other files.</p>
<p>That amount of duplication didn't happen overnight, but it also took several years to fix. Common libraries you always have to think about how changes affect other builds, but having to constantly verify that you've fixed a bug in all the copies is much worse, trust me. It feels like more work up front to set up a common library, but it will save you time and hassle in the long run.</p>
<p>Duplication is better than premature abstraction.</p>
<p>I have wasted countless hours in the early part of my career/hobby of programming pulling duplicate code out into a separate class, function, or module (it's DRY! it's good!) only to have to add on more and more special handling of <em>slightly</em> different behavior followed by Dark Places in My Code I Dare Not Tread followed by pulling the **** thing back apart again to save my sanity.</p>
<p>You can <em>definitely</em> be too DRY.</p>
<p>The heuristic I mostly follow now (and it <em>is</em> a heuristic, not a hard-and-fast rule) is the rule of 3: if something is similar/duplicated in three places in a codebase I will <em>think</em> about factoring it out. This is again meant to be a guide and not a substitute for thought: you still have to exercise good judgement (same as with being DRY) but you will be less likely to shoot yourself in the foot.</p>
<p>This warning might seem overly dire, but I think the idea that if you have to change the same thing in more than one place you will inevitably forget (i.e. DRY is good) is already in the water supply. I don't think you have to make an argument in it's favor, so I'm giving caution against the opposite extreme.</p>
<p>The question to ask is whether the two pieces of code really represent the same thing or they just happen to look identical.</p>
<p>Can you imagine needing a change in that code for one client (client as in calling code) but not for the other?</p>
<p>Is the same person responsible for both clients?</p>
<p>If we were neighbors, technically speaking we could share a wife and children. It could be most convenient. It could also become most complicated, depending on your point of view.</p>
<p>So as often, there is no straight answer.</p>
<p>As I'm sure you know, code duplication is generally considered a code-smell, i.e. something to be avoided.</p>
<p>If possible you ideally want to break out the common code into a separate class library within your repository and have both of your applications reference that class library.</p>
<p>However, the shared library approach can then make things more difficult, because (amongst other things) you will need to consider how changes needed to the shared library by one of your applications may then impact on all the other applications that use the shared library.</p>
<p>To get round that you ideally want a programming environment where you can create versioned packages from that shared code (e.g. NPM in JavaScript or NuGet in .NET) so that each application can reference a specific version of your shared code.  You can then make changes to that shared code safely and introduce those changes to one application at a time by changing which version of the shared package each application references.</p>
<p>(Those versioned packages would typically be published only within your organisation, not on public NPM/NuGet/etc.)</p>
<p>Let us assume the code is identical because it does the same task for the same reason, not due to happenstance. Otherwise, there is nothing to talk about anyway.</p>
<p><strong>A dependency can be a heavy burden.</strong><br>
It increases the need for coordinating any changes, hinders tailoring to the specific use-case where appropriate, and much of it will be or become useless for any one of the projects. This is exacerbated for non-compiled code, where unused code is an especially heavy dead weight.</p>
<p><strong>Managing independent duplicates is also a heavy burden.</strong><br>
How will you track down (or even remember you should) all of them if you fix or improve any?</p>
<p><strong>In all things, balance</strong>:</p>
<ol>
<li><p>Is the functionality sufficiently complex and / or commonly needed?<br>
Put it into the appropriate common library, which need not be a SO / DLL. The overhead is worth it and the extra scrutiny is welcome.</p>
</li>
<li><p>Is it small and easy enough, or should be tailored to the use-case?<br>
Duplication might be a code smell, but that doesn't mean it isn't the smart choice.</p>
</li>
</ol>
<p><strong>Take the time to get it right.</strong><br>
Remember YAGNI and refactoring, the fewer depend on some interface, the easier it is to change, move, remove, or replace.<br>
Retracting an interface is much more costly than promoting one, and having to keep it around is a drain.</p>
<p>It has been my experience that the ideal solution to this specific problem is to create a static library in the same repository as your other two apps.</p>
<p>This resolves MOST OF the awkwardness of maintaining library versions, and ensures the code does not diverge.</p>
<p>This works in scenarios in which the systems in question are tightly coupled by nature and the relative likelihood that they will encounter a different build of their counterpart in the wild is quite low.</p>
<p>If the systems are loosely coupled and/or can interact with different builds of their counterparts with moderate frequency, this could be a bad plan, as one becomes less incentivized to think about (and test) BW compat scenarios. This too, can be managed, but requires vigilance, and may be better supported by a typical 'versioned software package' approach.</p>

What benefit do we get by thinking of objects as "sending messages to each other"? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/417896/what-benefit-do-we-get-by-thinking-of-objects-as-sending-messages-to-each-other
<p>I have read that in OOP, we think of objects as "sending messages to each other", for example if we did <code>car1.stop()</code>, we say that "we sent the message <code>stop()</code> to the <code>car1</code> object".</p>
<p>But what benefit do we get by thinking of objects as "sending messages to each other"? what I mean is let's say that we thought of <code>car1.stop()</code> as "calling the method <code>stop()</code> of the <code>car1</code> object", what's wrong with thinking of it like this?</p>
<p>It avoids micromanaging.</p>
<p>If I tell you to stop in an OO way I haven't called your stop procedure, or your stop function, or your stop method. When I send that stop message I've raised a stop event. One that you are free to handle or not. You don't even have to respond. Now sure, you might use a stop method to handle that, but that's your problem.</p>
<p>This avoids micromanaging because I don't have to deal with how you respond to being told to stop. I don't have to think, "OK I told him to stop, now what's he going to do? If he ignores me then I'll do this, if he has a problem then I'll do that, if he stops then I'll do this next thing". No, that's micromanaging. If anything needs to be told what happened when you got told to stop it's better to let you decide who to tell. It gives me fewer things to think about. It gives you more freedom to control your stop response.</p>
<p>This keeps a very low form of coupling between objects. Lower even than typical<sup><a href="https://softwareengineering.stackexchange.com/questions/417896/what-benefit-do-we-get-by-thinking-of-objects-as-sending-messages-to-each-other/417902#comment919148_417902">1</a></sup> functional programming. Functional programming does composition beautifully. Pure functions make reasoning simple. But it locks you down to sending the response back to the caller. It has nowhere else to go. That couples caller to callee. Messages, however, can go where they've been configured to go without worrying what becomes of them. It's not as straightforward but it's another detail avoided.</p>
<p>Another benefit is minimizing data movement. Functional programming has been called "data in, data out". OOP wraps data in a "message in, message out" system. The messages can be very lightweight compared to the data.</p>
<p>I'm contrasting OOP with Functional here but that shouldn't be taken to mean you exclusively use one or the other. Many of functional programmings principles can be used while using OOP. Prefer immutable objects. Be disciplined with side effects. Etc.</p>
<p>OOP messaging is a powerful way to model. It inherently respects encapsulation. I don't look inside you. I don't ask you about your privates. I tell you what I want done and you decide what, if anything, to do about it. Once I tell you, I don't have to hover over you and manage what you do. I just let you do it. Whatever it is. If I ever need to know more I'm sure someone will tell me.</p>
<p>Messaging is sometimes implemented by using methods as the messages but that's just one way to do it. It could be text messages, packets, tweets, emails, etc. The methods are not what makes it OOP. It's how you use them.</p>
<p>Here's the rub. Just because you're using an “OOP language” that has methods doesn't mean every method is a genuine OOP message. No language perfectly enforces this. Your programming team has to enforce this. If you're lucky your core packages will follow this well. I've never worked on a project where OOP was 100% enforced or a functional project where everything was pure. But the better projects will find some way to at least signal clearly where the ideals are followed and where they have been compromised. This is important because it impacts the readability of the code. It's good to quickly know if you're looking at a true OOP message, a pure function, or some other monster.</p>
<hr>
<p>Joel has blessed us with this awesome comment:</p>
<blockquote>
<p><a href="https://softwareengineering.stackexchange.com/questions/417896/what-benefit-do-we-get-by-thinking-of-objects-as-sending-messages-to-each-other/417902#comment919148_417902">1</a>. Regarding Functional Programming only returning to the caller, I would suggest looking into the technique continuation passing style combined with tail call optimization. "When you're done here, talk to this other guy. I will show myself out." – <a href="https://softwareengineering.stackexchange.com/users/223532/joel-harmon">Joel Harmon</a></p>
</blockquote>
<p>This is all true. But if the caller is saying "talk to this other guy" the caller is still dealing with knowing where to send the response. To put functional programming coupling on par with OOP (that configures output ports in constructors) pass "this other guy" into the enclosing scope of a closure.  That way the caller neither knows nor cares where the result goes.</p>
<p>None.</p>
<p>Not sure where you are reading this idea of objects sending messages, but if it is the same as this question, <a href="https://softwareengineering.stackexchange.com/questions/46592/so-what-did-alan-kay-really-mean-by-the-term-object-oriented">So what *did* Alan Kay really mean by the term "object-oriented"?</a>, then it's pretty clear that the inventor of the term Object Orientated is talking about passing messages in a way that today's OOP languages just don't do.</p>
<p>So it may be useful if you are programming in Smalltalk, or writing event driven code, but not if you are talking about today's accepted meaning of Object Orientated Programming, which has methods - not messages.</p>
<p>If you call <code>car.stop()</code> you <em>aren't</em> sending the stop message to <code>car</code> and carrying on with your life, maybe getting a message back at a later date. You <em>are</em> "going to" the code in the stop method, running each statement in turn and returning a result back to where you left off.</p>
<p>The answer may be quite simple: "Sending a message", unlike "calling a method", is using a language which is understood outside of the software domain. When explaining abstract concepts it is always good to use words from another domain which the audience has an understanding for.</p>
<p>In addition to the points that candied_orange made, this concept is highly useful in for multi-threaded and concurrent systems.  In such systems, you can't depend on the notion that when you call a method that it will be the next thing that happen in your program or that the calls will even execute in the order they were called.  Doing so will lead to race conditions and other problems.</p>
<p>It's helpful instead to think about method calls as a message to another object that it will receive sometime later, perhaps after some other message has been processed.  This model can help produce robust systems without relying too heavily on locks which can create contention and hobble performance.</p>
<p>In the olden days, sending a message in C++ or Objective-C was indeed just a glorified function call. Admittedly the call was dynamic, so you didn’t have to figure out which function body to call, just the method name, but under the hood it was just a function call.</p>
<p>That has been changing in the last years, at least where I work. There are so many things where you cannot just call something and wait for it to happen. Just a plain URL request: It can happen in a few milliseconds, but even that is too slow to waste the time waiting for it. But it might time out after 60 seconds. It might detect there is no WiFi and ask the user to turn WiFi on. It might run into errors that can be fixed by retrying. This is all so complicated, you can’t just make it a function call and wait.</p>
<p>Now the message metaphor works really well. Instead of ordering “download that URL” and waiting for the result, you send a message “I’d like that URL, please”. You continue what you were doing, and eventually someone will send a message back to you, either reporting the contents of the URL or reporting an error. And at that point your whole situation might have changed; you wanted to download an image and display it, but meanwhile the user switched to a different page! With a plain call, that wouldn’t have been possible.</p>
<p>I think this may mainly be due to the history of object-oriented programming. Some of the early OO languages had syntax that explicitly used messages.</p>
<p><a href="https://en.wikipedia.org/wiki/Smalltalk#Messages" rel="nofollow noreferrer">Smalltalk</a> described its operations as messages, using a syntax like:</p>
<pre><code>car1 stop
</code></pre>
<p>And in Lisp Machine Lisp <a href="http://www.softwarepreservation.org/projects/LISP/MIT/nnnfla1-20040122.pdf" rel="nofollow noreferrer">Flavors</a> you would write</p>
<pre><code>(send car1 ':STOP)
</code></pre>
<p>As you can see here, the message argument is an expression (since it needs to be quoted above), so you can abstract it away in a variable.</p>
<pre><code>(let ((msg (if (some-condition) ':START ':STOP)))
  (send car1 msg))
</code></pre>
<p>Of course, these are isomorphic to function calling, and <a href="https://en.wikipedia.org/wiki/Common_Lisp_Object_System" rel="nofollow noreferrer">CLOS</a> dropped the explicit message passing syntax in favor of generic functions with no loss of functionality. And you can accomplish dynamic message passing with first-class function objects.</p>
<p>But many programmers still like to think of this as message passing, because one of the principles of OOP is that each class takes responsibility for how it implements actions. Calling a method is considered to be telling the class of the object to take an action, and that seems analogous to passing a message to an autonomous actor ("actors" and "messages" are also common in many asynchronous programming models).</p>
<h2>"Messages" Metaphor</h2>
<p>The "messages" metaphor helps you in creating well-designed classes, encapsulating their internals. But it's a metaphor, one specific way of viewing object-oriented software.</p>
<p>The metaphor of a lot of employees (instances) doing different jobs (classes), and communicating by sending messages and waiting for answers more naturally tends to create a structure where the message types are well designed and grouped according to the jobs of the recipients.</p>
<p>In this metaphor, for every message type, you have to decide on some very useful aspects:</p>
<ul>
<li>What is the content of the message? What does the recipient really need to see in the message to create an answer? This translates to method name and parameters.</li>
<li>Who will be the recipient of this message (who will be responsible for answering)? This translates to classes and instances.</li>
<li>Which notes will the recipient need to maintain over various messages to be able to answer adequately? This translates to instance fields.</li>
<li>Do all the steps necessary for processing a message fall into the responsibility of the recipient? Or are there steps that should be delegated to someone else? This translates to implementing the method either locally or by sending subordinate messages to other instances.</li>
</ul>
<h2>"Method-calling" View</h2>
<p>Of course, method calling is an absolutely valid view of object-oriented software. That's what happens at the core of object-oriented software. And of course you can ask all the above questions with a method-calling terminology as well.</p>
<p>But the method-calling view can more easily put the method into focus with its procedural content and ignore the "responsibility" aspect.</p>
<p>Have you ever found yourself thinking along the line:</p>
<blockquote>
<p>Oh, I need to do X [e.g. print some nicely-formatted currency amount] here. Wait,
I've done this in the Y [e.g. BankAccount] class, so let's just create a
Y [BankAccount] instance, have it print the value, and then forget about it.</p>
</blockquote>
<p>From a procedural view, that's fine, but really bad object-oriented design.</p>
<p>The "messages" metaphor and the questions that it naturally brings along, help me not to fall into this trap.</p>
<p>Here are some linguistic reasons.</p>
<p>Firstly.</p>
<p>When there are no parameters, there isn't a lot of daylight between</p>
<ul>
<li>"Send object Z message X()" and</li>
<li>"Call method X of object Z".</li>
</ul>
<p>But, when you have arguments (e.g. Z.X(Y)), we can think of X(Y) as being the message. To say "Call method X(Y) of method Z" is wrong because X(Y) is not a method.  We have a choice between.</p>
<ul>
<li>"Send object Z message X(Y)" and</li>
<li>"Call method X of object Z with argument Y.</li>
</ul>
<p>I prefer the former because it lets me talk about X(Y) as one linguistic unit, which I call the "message".</p>
<p>Secondly.</p>
<p>"X" is not a method, it's a name.  In a non-OO language, this distinction isn't that important. If a Fortran programmer says "Call subroutine X", it's clear that they mean "Call the subroutine whose name is 'X'". That's the whole point of names; we can use them in place of a named thing, because each name should identify one and only one thing (in each context).  But, in an OO language, there isn't typically a single method with name "X"; "X" might be the name of an abstract method and also of various concrete methods; so saying "Call the method whose name is 'X'" doesn't make sense and nor does "Call method X" and nor does "Call method X with argument Y."  I have to say the "of object Z" part; and that is sometimes inconvenient.</p>
<p>Thirdly</p>
<p>Saying "Call method X of object Z" makes it seem like the only role of Z is to provide a context in which to interpret the name "X"; and once it's figured out which method named X is to be called, the machine just goes ahead a calls it as if it were any other subroutine. But, that's not what's going on.(*) Z is used not only to find the method, but also it also plays the role of the recipient. So to be precise we need to say something like</p>
<ul>
<li>"Call method X of object Z with argument Y and with object Z as the recipient" rather than the more metaphorical and shorter</li>
<li>"Send message X(Y) to object Z".</li>
</ul>
<hr>
<p>As an instructor, I worry that the message sending metaphor can easily lead students astray.  I use it, but I try to help the students understand that underneath it all, whether you call them "message sends" or "method calls", it really is just a kind of subroutine call.</p>
<hr>
<p>(*) In some languages, an expression Z.X(Y) might be considered equivalent to (Z.X)(Y), where Z.X is an expression that evaluates to a closure that can be applied like any other closure. But this is not how method calls (or message sends) in most OO languages work.</p>
<p>We understand messages to be:</p>
<ul>
<li>Slow... They take time, and care to draft</li>
<li>Sent through some indistinct mail box that simply accepts messages
<ul>
<li>The mail box does not respond to us with any indication of success/failure</li>
</ul>
</li>
<li>Hands off - Someone else is responsible for directing that message to its destination/s, or there are other process that can affect a directly delivered message (say placed on a desk, knocked off by a cleaner).</li>
<li>Undelivered potentially. Its not like the postman/horse rider/office worker is a 100% reliable delivery service. Accidents happen, addresses are misunderstood, etc...</li>
<li>Unread by the addressed individual. It might be read by their replacement, family member, colleague, or executor of the estate in a tragic case.</li>
<li>Potentially unintelligible by the recipient. They might not know how to make sense of it, or even attempt to read it using other techniques (such as reading it through a mirror, or reading the First Capitalised letter of each paragraph).</li>
<li>Unresponded to. The recipient does not have to choose to engage. Imagine if everyone responded to their junk mail...</li>
<li>Slowly responded to. As the recipient takes their good time in drafting a reply, gathering information, considering it, and forming it into a suitable response.</li>
<li>One of many things a recipient is dealing with. Its not as if your message is top of the pile, and even if it is it might be disregarded or delayed in favour of other activities.</li>
</ul>
<p>And we know that about message passing from lived experience.</p>
<p>Functional Calling though evokes directly talking to someone face to face: Instantaneous, Direct, Real time, no wait, Two-way dialogue, with every side-effect apparent to the observant.</p>
<p>I think the 5 answers have missed the point. Let's admit one thing to start off. Whether it is called a message or a function it is just code that gets executed.</p>
<p>Function and subroutine had long been used before method was coined. So why was a new word needed? Because both function and subroutine call very particular pieces of code. Thinking of the call as a message allows a new paradigm.</p>
<p>With inheritance you don't know where the method is actually implemented. Let's say that in this case that car is a child of vehicle and it is vehicle that first implements the stop message. Thus car doesn't have to implement a new message. Car inherits the code to implement the stop message from vehicle.</p>
<p>However let's say that we also have a amphibious_vehicle which is also a child of vehicle. Now vehicle's stop method is assuming braking on dry land by sending a message break(0) to itself. Brakes work on land, but don't work on water. So while in the water something different is needed for amphibious_vehicle.</p>
<p>But this means that all vehicles will understand stop() regardless of how the particular child of vehicle may override vehicle's code for the method.</p>

design - Which is preferred: subclass double or create extension methods to test (relative) equality due to floating point differences? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/418182/which-is-preferred-subclass-double-or-create-extension-methods-to-test-relativ
<p>I am writing numerical calculation software using .NET C#, which needs to be blazingly fast. There is a lot of fractional math. So using <code>decimal</code> type is pretty much out of the question, <a href="https://csharpindepth.com/Articles/FloatingPoint" rel="noreferrer">given its poor speed relative to using <code>double</code>.</a> But of course <code>double</code> has its problems testing for equality, with floating point rounding issues.</p>
<p>My options seem to be subclassing <code>double</code> and overriding <code>==</code>, <code>&lt;</code> and <code>&gt;</code>; versus creating extension methods for <code>double</code> equivalent to these. My tendency is to go with the latter - less code to change and maybe it will be less confusing to others reading the code later? Is there another option? What are other good reasons to choose one over the other?</p>
<blockquote>
<p>"double has its problems testing for equality".</p>
</blockquote>
<p>No, that is not true. "double" does not have such problems. Equality testing for double values is well defined and usually works as it should (which may sometimes not be what several programmers expect, of course).</p>
<p>True is: <strong>programmers</strong> have often problems with testing for equality correctly in numerical software. You cannot simply fix this by using another data type, or by providing some standard equality comparers with some standard precision for equality up-front. Though such approaches may be part of a solution, you first and foremost need to make sure the programmers in your team know how to do floating point comparisons correctly.</p>
<p>Before reading the rest of my answer, please have a look into "<a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic"</a>. Now. No excuses.</p>
<p>So, since you read this paper, you now have learned that there are several alternatives on how comparisons can be done when using floating point numbers, and one has pick the correct one for the specific case. For example, it may be necessary to take absolute or relative errors into account, to analyse the required precision for each individual comparison/quantity, or to take the specific operations and algorithms into account which will be used in the numerical software you are designing. Another thing which might be necessary is to adapt the <em>scaling</em> of some quantities, or other measures to keep rounding errors under control.</p>
<p>To find out what one <em>really</em> needs, I would recommend starting to implement some of the algorithms and determine precisely which kind of floating point comparisons are required there. When comparisons of the same kind occur more than two or three times, <em>then</em> it is time to refactor them into a reusable library (maybe using extension methods, which is a useful way in C# whenever it comes to add some reuseable methods to an existing type one cannot change). It should be clear now why overloading an operator like <code>==</code> is not useful, since there is only one such operator per type, with no additional parameters like a <code>precision</code>.</p>
<p>Don't try this up-front until you have already written several of such numerical programs!</p>
<blockquote>
<p>financial calculation software</p>
</blockquote>
<blockquote>
<p>double has its problems testing for equality, with floating point rounding issues.</p>
</blockquote>
<p>These two problems are not compatible. <strong>Do not</strong> write a <code>==</code> that isn't transitive, especially not for financial software. Depending on the calculations you are doing, you might not need floating point numbers <em>at all</em>, but rather do everything in fixed point (i.e. integer) arithmetic.</p>
<p>Don’t do that. Think about what you really want and name functions accordingly. Given a number x, there is a range of numbers that are likely equal to x (those close to x). A number is definitely greater than x if it is greater, and not in the LikelyEqual range. A number is likely greater or equal x if it is greater or equal to x or in the LikelyEqual range etc. You want these functions:</p>
<pre class="lang-cs s-code-block hljs csharp"><code>LikelyEqual
LikelyNotEqual
DefinitelyGreater
LikelyGreaterOrEqual
DefinitelyLess
LikelyLessorEqual
</code></pre>
<p>This solution makes it absolutely clear what your code does. Your solution is clever. Clever is rarely a good idea.</p>
<p>Extension methods seem to be the best way to go here, so we don't confuse "exactly equal" with "almost equal." An optional <code>precision</code> argument should be used (give a default that is best for the general situation; it can always be overridden). So for testing "equality", have something like</p>
<pre class="lang-cs s-code-block hljs csharp"><code><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">ApproxEqual</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> <span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b, <span class="hljs-keyword">double</span> precision = <span class="hljs-number">0.0000000001</span></span>)</span>
{
    <span class="hljs-keyword">return</span> Math.Abs(a - b) &lt;= precision;
}
</code></pre>

coding style - Naming of "safe" versus "fast" functions - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/418326/naming-of-safe-versus-fast-functions
<p>Say that I have two functions that are essentially identical, where one validates its arguments while the other doesn't.  The rationale: sometimes you want to be safe and sometimes you want to go fast.</p>
<p>What's your preferred naming convention to distinguish the two?  For example:</p>
<pre class="lang-c s-code-block hljs"><code><span class="hljs-function"><span class="hljs-keyword">list_err_t</span> <span class="hljs-title">list_push_a</span><span class="hljs-params">(<span class="hljs-keyword">list_t</span> *ref, <span class="hljs-keyword">list_t</span> *item)</span> </span>{
    <span class="hljs-keyword">if</span> ((ref != <span class="hljs-literal">NULL</span>) &amp;&amp; (item != <span class="hljs-literal">NULL</span>)) {
        list_push_b(ref, item);
        <span class="hljs-keyword">return</span> LIST_ERR_NONE;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> LIST_ERR_BAD_ARG;
    }
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">list_push_b</span><span class="hljs-params">(<span class="hljs-keyword">list_t</span> *ref, <span class="hljs-keyword">list_t</span> *item)</span> </span>{
    item-&gt;next = ref-&gt;next;
    ref-&gt;next = item;
}
</code></pre>
<p>What would you name <code>list_push_a</code> and <code>list_push_b</code>?  I think <code>list_push_safe</code> and <code>list_push_fast</code> is a bit wordy -- one of them should just be <code>list_push</code>.  (And note that I'm <em>not</em> asking about CamelCase vs snake_case etc...)</p>
<h3>addenda...</h3>
<p>There have been some great answers already.  I should have mentioned up front that the programming environment in question is low-level embedded devices, where speed is important and resources are scant.  For example, raising exceptions is not an option...</p>
<p>Your typical caller will expect functions to be safe, i.e. to inform about failure in an orderly fashion instead of crashing or giving funny results. You chose to use the traditional C style of error return values for that purpose, and that's probably okay in your situation (generally, I'd prefer exceptions, but I don't know if that's usable for you).</p>
<p>I'd go for calling the safe version <code>list_push()</code>, and the "fast" version <code>list_push_unsafe()</code> or <code>list_push_no_checks()</code>, as the most important fact about the "fast" one isn't its speed, but its unsafe behaviour. And of course clearly describe the difference in the function documentation.</p>
<p>I'd explicitly recommend against using the wording "fast" for the second one, as that doesn't convey a hint about the additional risk. Then the typical caller will see that there are two implementations, a slow one and a fast one, and will of course choose the "better" one: the fast one.</p>
<p>I would prefer to know when to use one vs the other.</p>
<p>Oh sure you could name one <code>list_push_fast()</code> and the other <code>list_push_safe()</code> but as your newest on-boarded employee I've no idea when to use one vs the other.</p>
<p>First, understand that removing two null checks is an exceedingly trivial optimization. Speed is a poor justification for separating validation. A better justification is that validation has already been performed elsewhere.</p>
<p>So if, as my new boss, you insisted on keeping both I'd name them <code>list_push_checked()</code> and <code>list_push_unchecked()</code>. If we name one simply <code>list_push()</code> my vote is to make that the checked one.</p>
<p>I'm assuming that you have a more complex usecase and you're not trying to optimize the code actually posted (which is 2 cmp statements and if that needs to be optimized out you're likely to find more speed elsewhere).  I would explicitly call one version unsafe or unchecked as other suggested.</p>
<p>I would also suggest putting a lint rule into your build.  That lint rule should consider any use of the fast version an error.  You can then use a lint disable comment on lines where it's actually needed.  This will ensure that users don't blindly use the unsafe version and put a little thought into it.</p>
<p>In a scenario like this, there are not just two, but at least three sensible ways the function could be designed:</p>
<ol>
<li><p>If pointer is null, function's behavior is specified as doing nothing.</p>
</li>
<li><p>If pointer is null, function's behavior is specified as trapping.</p>
</li>
<li><p>If pointer is null, function's behavior is undefined.</p>
</li>
</ol>
<p>In some similar scenarios, it may make sense to have semantics that would be specified as either trapping if observable nonsensical behavior would be otherwise unavoidable, but allowing nonsensical behavior to be avoided without a trap.  For example, a function which is supposed to compute <code>x*y/z</code> with integer values might guarantee that it will either yield an arithmetically-correct value or trap, but not specify which option it will choose if <code>x*y</code> would overflow.  Under such a specification, a function could optimize the case where <code>y==z</code> and <code>z!=0</code> so that it simply returns <code>x</code> without having to determine whether <code>x*y</code> would overflow.</p>
<p>A variant that can't guarantee anything about corner-cases behavior would be "unsafe" compared with one that could offer some behavioral guarantees, but whether a function would be "safe" in a particular use case would depend upon the caller's requirements.  Consider, for example, a <code>malloc()</code> style function.  Depending upon circumstances, a function which is specified to always either yield a valid pointer or trap may be "safer" than one which would return null in case of allocation failure, or the fact that the function might trap could mean that it's "unsafe" and the version which would return null would be safer, despite the fact that the caller would need to validate the result.</p>
<p>There are two possibilities: One is that speed for this code is of no importance. Have you measured it? If not, no importance. Use the safe code. Two is that speed is important, in that case take the safe function and declare it as "inline" or "static". Obviously not calling the "fast" function but incorporating it. And you would check your compiler documentation if there is a way to indicate which result is expected, for example if you expect that in 99% of all cases the two pointers are not NULL.</p>
<p>Another possibility is that calling the function with a NULL pointer is a severe bug. In that case the caller is unlikely to have code checking the return value, and you may be better off using assert or similar to check that the pointers are not NULL. And if you find they are, fix the caller.</p>
<p>On the other hand, you might not even need an assert because your program will crash / fall into the debugger if one of the pointers is NULL.</p>
<p>If possible you can separate the actual activity and the checks into two different components. One wraps around the other and external components that want to be always safe use the safe wrapper while components that are so deep in the system all parameters are already validated at that point just go with the inner plain class that holds the unprotected implementation.</p>
<p>Obviously this does not work for all cases, but it might be worthwhile to consider.</p>
<p>In this case the "safe" option is still unsafe when you pass in pointers to invalid memory. The only way to have it safe is to call the function correctly. This is true for both options. Especially for C or C++ code, I'd rather have the unchecked option as the default than to have it do some checks that may or may not make it safer by a small amount and claim a false impression of fail safe behavior.</p>
<p>If your use case for the "safe" option is really <em>some function returns an object or null, that I want to push to the list directly if available</em>, then I'd suggest to add the checked variant as a special case. Name them after the use case: <code>list_push_if_not_null()</code>.</p>
<p>Note that the return value in case nothing is added isn't actually an error. It's the expected and successful behavior in case null is given. Consider to omit that here too. If you want to use that info for control flow external to that function, you might want to also perform that check external to the function.</p>
<p>Checking if the first parameter is null doesn't seem to make sense to me here. This is not Java. In C a non-zero pointer might point anywhere. You should rather add a test suite to the client code to make sure you call the function with an actual object of the required type. As a library author you might want to add documentation and example code though.</p>
<p>Also consider to add a different type for list items. For your own sanity. And note that names ending with <code>_t</code> are reserved by the POSIX standard. So if this is your actual code, you might want to rename your types.</p>

object oriented - Is programming an emulation of the real world? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/418109/is-programming-an-emulation-of-the-real-world
<div>
            <aside class="s-notice s-notice__info js-post-notice mb16" role="status">
        <div class="grid fd-column fw-nowrap">
            <div class="grid fw-nowrap">
                <div class="grid--cell fl1 lh-lg">
                    <div class="grid--cell fl1 lh-lg">
                        <b>Closed</b>. This question is <a href="/help/closed-questions">opinion-based</a>. It is not currently accepting answers.
                        
                    </div>
                </div>
            </div>
        </div>
            <hr class="my12 outline-none baw0 bb bc-powder-400">
        <div class="grid fw-nowrap fc-black-600">
                <div class="grid--cell mr8">
                    <svg aria-hidden="true" class="svg-icon iconLightbulb" width="18" height="18" viewBox="0 0 18 18"><path d="M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z"></path></svg>
                </div>
            <div class="grid--cell lh-md">
                <p class="mb0">
                    <b>Want to improve this question?</b> Update the question so it can be answered with facts and citations by <a href="/posts/418109/edit">editing this post</a>.
                </p>
                    <p class="mb0 mt6">Closed <span title="2020-10-20 08:24:12Z" class="relativetime">7 days ago</span>.</p>
            </div>
        </div>
            <div class="mt24 grid gsx gs8">
                    <a class="s-btn s-btn__outlined grid--cell js-post-notice-edit-post" href="/posts/418109/edit">
                        Improve this question
                    </a>
            </div>
</aside>

    </div>

<p>Assume that we have a car in the real world, this car would be composed of atoms, and we can do operations on this car (for example: we can move the car or change its color, etc.).</p>
<p>And assume that we have a car object in the computer world (in RAM), this car object obviously is not a real car but rather a representation of a real car, but we can imagine that this car object is a real car, and we can also do operations on this car object (for example: we can move the car object or change its color, etc.).</p>
<p>Now if we want to for example change the color of the car in the real world, we have to manipulate some of the atoms that compose the car to accomplish that.
And to change the color of the car object in the computer world (in RAM), we have to manipulate some of the bits that compose the car object to accomplish that.</p>
<p>However, one difference that I can think of between the real world and the computer world is that in the real world the car is visible to people, however in the computer world the car object is not visible to people (you have to paint the car object on the screen to make it visible to people).</p>
<p>So can we think of programming as an emulation of the real world? more specifically, can we think of the real world as "real world RAM" that can contain any object (these objects would be composed of atoms) in the same way that RAM can contain any object (these objects would be composed of bits)?</p>
<p>No.</p>
<p>Object oriented programming will at times model the real world, but as the old saying goes "all models are wrong, but some are useful". Even in the real world, changing the color of the car doesn't involve changing the state of the atoms in the car, but adding new ones that have the new color. The real world does not change its state so easily as a computer, and as we learn more about our physical world we're learning just how non-deterministic it is.</p>
<p>And unfortunately, many schools teach OOP via the "car" model of programming which is horrible. Modeling the real world one-to-one is very often a poor way to solve problems at hand. I'd recommend developing a better mental model for programming, one based more on coupling and reasons to change.</p>
<p>I would tend to think of programming as less about emulating the real world and more as a form of executable mathematical modeling. You can develop mathematical models for anything, even things with no real-world equivalent (which sometimes crosses over; the idea of non-Euclidean geometry was a sort of intellectual speculation until the Einsteinian revolution and boolean algebra would have seemed an odd curiosity before someone had the base tech to build a digital computer).</p>
<p>Mathematics demands rigor, not usefulness; programming is the same. I can certainly write simulations that closely approximate the real world, but there is nothing forcing this to be the case. Just like you can model systems that don't exist in nature, you can write programs that compute things with no analogue.</p>
<p>Thinking of a car as a collection of atoms isn't particularly useful, unless perhaps you're examining some quantum effect on the car, which is unlikely.  A mechanic doesn't care about the atoms when he's turning a wrench on an engine bolt.  He might care about the <em>temperature</em> of the engine, but that can be modeled by a simple measurement; you don't need the <a href="https://home.cern/science/accelerators/large-hadron-collider" rel="nofollow noreferrer">LHC</a> to figure that out.</p>
<p>So what you're left with are everyday attributes, like the bolt's thread pitch, the size of the wrench that fits it, and the torque standard that must be applied to it when it is tightened.  These are things that can be modelled inside a computer, and the computer can actually make predictions about what is likely to happen when you turn that wrench, based on those attributes.</p>
<p>Notice I haven't said anything about metallurgy, chemistry (the rusting of the bolt), or the physical fitness of the person turning the bolt.  Neither you, nor the computer, need to be all-seeing in order to impart useful information from computing.  Quite the opposite, in fact; we <em>always</em> rely on <em>partial</em> information when we are modelling anything, especially in a computer.</p>
<p>Does the computer always model real-world actions or consequences?  No, of course not.  Many abstractions in a computer are there for the sake of the computer itself.  And many of those abstractions are, well, abstract.  We have collections because many things can be modelled as a collection of entities (the "entity" being essentially a "noun"), including the controls on a <em>User Interface.</em>  Those entities can be anything, including cars, but they can also be collections of numbers in a neural net, where you're actually taking some relationship in the real world, breaking it down into bits, and modelling the continuous relationship between input and output.  That's pretty far afield from, say, a baseball that you're simply holding in your hand.</p>
<p>Remember, all the computer knows about that paint color you're about to paint your car with is the formula for mixing the pigments that produce that color.  It doesn't actually know anything more about the paint, unless you tell it.</p>
<p><strong>OO is not about the "real-world"</strong>. Not in the sense a lot of people seem to think it is.</p>
<p>Objects are supposed to model your <em>very special, and narrow</em> view of something in the <em>context of the problem</em> you are supposed to solve.</p>
<p>If the context of traffic policing a car may have just one method <code>ticket()</code>. In the context of leasing, it may have <code>lease()</code>, <code>repossess()</code>, whatever. In the context of garbage disposal it may have <code>destroy(): Tonnage</code>, or whatever.</p>
<p>An objective "car" does not exist. Indeed no objects nor model exists without context. This is why any design / architecture that starts with "let's define what a car is" is wrong. This is also why comments like "but a car doesn't lease itself in the real-world" don't make any sense. We don't model the real-world.</p>
<p>What does "emulating the real world" even mean? Does it mean emulating all aspects of a car which took millions of man hours to conceive, refine, and manufacture?</p>
<p>Or does it mean taking some programmer, probably one with very little experience in mechanics or mechanical engineering, and modelling their naive conception of what the essence of a car is?</p>
<p>I agree with @Michael's answer that ultimately programming is more like an executable mathematical model. Certainly a program is far more similar to maths than to the "real world" if that means physical things.</p>
<p>But more pertinently, what is being modelled in the first place is not the real world at all, but some human conception of it.</p>
<p>In the "real world modelling" paradigm, the programmer is cast as somebody who simply measures or detects (in a routine or fairly routinised way) the features of some thing that already exists "in the real world", and translates that into object-oriented code. It's presumed to be obvious enough what features a car has and how the whole thing hangs together in order to be a useful machine.</p>
<p>In the actual real world, the thing to be modelled is often some new implementation of ideas or principles - or else anything that does "really" exist is to be further modified in some way as part of the translation to a computer program - so the programmer really ends up as the designer and midwife of some new conception. And that role of designer remains a professionally expert role, involving massive knowledge, judgment, creativity, and ingenuity.</p>
<p>And that is really where this paradigm fell down: it does not itself reflect the real world of software development.</p>
<p>In the general sense object-oriented programming is not an emulation of anything. At best it can be used to make analogies to real-world objects, more for convenience of programmers than anything implicit in programming or OO itself. In my experience these analogies are most often learning or comprehension aids and when you get down to the fine details the analogy falls down - unsurprisingly, since this is the nature of analogy.</p>
<p>Your car example is a little mixed. Yes, we can create a <code>Car</code> object that models aspects of a real-world concrete instance. We can make it as detailed as we like but the object in the computer is at best only a description of the real-world object and some subset of the
real car's properties. We can perhaps use some physics simulations to affect the virtual car, but inside the computer you've got only analogs of the various physical properties.</p>
<blockquote>
<p>however in the computer world the car object is not visible to people</p>
</blockquote>
<p>In the real world we see things by intercepting photons that have bounced around and eventually impacted on our retinas. The photons that happened to bounce of the car will carry information about their interaction with the car's surface. There is no such thing in the computer, no "world" with photons bouncing around only memory, storage, I/O, etc.</p>
<p>So no, nothing can "see" <em>anything</em> inside the computer's memory. The best you can hope for is to build an emulation of sight, or analogise sight into something like "able to read an object's properties" or some such thing.</p>
<p>The problem is that we talk about these analogies as though they were much more than they are simply because it's the simplest way to get an idea across. We talk about pages, handles, windows, streams, pointers... all words that have concrete physical meanings that often are only vaguely related to the computer terms. We use the words because they <em>are</em> useful. I know that a handle is an index that is used to calculate an offset into a block of memory that contains the bytes which the operating system uses to record meta-data about a digital resource of some kind... but I only have to think "handle" because there's no <em>reason</em> to think about memory, metadata, etc. while I'm opening a file or working with a UI element, or... and so on.</p>
<p>So no, there is no equivalence between the real world and the internal state of your computer, no matter how many layers of abstraction you put in there.</p>

java - Are Car objects and Dog objects used in real life programs? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/418068/are-car-objects-and-dog-objects-used-in-real-life-programs
<p>While learning about OOP, I have noticed that a lot of the tutorials give examples of objects such as  <code>Car</code> objects and <code>Dog</code> objects, but I don't know if these kind of objects are used in real life programs.</p>
<p>I think they may be used in a game for example, so if a game have cars and dogs in it, it would use <code>Car</code> objects and <code>Dog</code> objects, but other than games, are these kind of objects used in real life programs?</p>
<p>Yes. Software is used in all sorts of fields of endevour. People who work with dogs or with cars may well use software to help them manage the information they need for their jobs, and in some cases those software programs will include <code>Car</code> and <code>Dog</code> objects.</p>
<p>For instance software to manage a car repair shop, or a vetinary surgery or kennel, or to design road systems.</p>
<p>Of course in many of these business cases the objects do not attempt to simulate the dog or the car, but to model how it actually exists in the world and how it relates to the organisation running the software.</p>
<p>Object Oriented programming was initially created for the purpose of simulations. If you have something like a simulation of traffic patterns, you might have Car-objects in the simulation. But outside the scope of simulation software, you probably wouldn't.</p>
<p>In my opinion, OO tutorials is just creating confusion by using simulation examples, since most OO software is not about simulations. For example the management software for a car dealership might have a <code>Car</code>-object, but the car object wouldn't have <code>drive()</code> or <code>turn()</code> methods, since these objects are not actual cars, just records for inventory management.</p>
<p>No, Car and Dog are usually just used for illustrative purposes, especially for explaining inheritance.</p>
<p>However, programs must model the real world, or more precisely: relevant aspects of the problem domain. <em>Object-Oriented Analysis and Design</em> and <em>Domain-Driven Design</em> often involve taking concepts from the problem domain and representing them as objects. For example, an inventory management system for car dealerships might very well have different Vehicle and Car classes.</p>
<p>But object-oriented techniques are most appropriate not to describe is-a inheritance relationships, but behaves-like compatibility. That is: just looking at data like “A vehicle <em>has</em> <code>wheels</code>. A car <em>is-a</em> vehicle and thus inherits <code>wheels</code>” is not that useful in practice. Describing behaviour like “A dog can <code>makeNoise()</code>. A cat can <code>makeNoise()</code>. Both dog and cat behave like an animal” is often more useful.</p>
<p>So OOP shines more in systems with complex behaviours, in particular GUIs and business rules. But there are alternatives:</p>
<ul>
<li>pure data modelling is often better suited to a relational model (as in SQL databases) than to an object-oriented model</li>
<li>very complex and dynamic behaviours do not benefit from language-level OOP support as implemented in Java, but often have to be implemented manually – <em>especially</em> in games</li>
<li>nowadays, data flows and events in complex GUI applications are often managed with reactive programming instead of OOP</li>
</ul>
<p>As others have said, Car and Dog are simplified examples for illustration--real world examples are going to be far too complex to be in your textbook.</p>
<p>Consider a real world example--my job involves a program that has an object Report.  A Report has a bunch of logic for reading in reports off disk and for obtaining information from what it has read--but a Report can't actually read anything nor store anything.  There are half a dozen different types of Report each with their own parser, storage and lookup routines, but the exact type is read from a configuration file and used to decide which subclass to create, then never looked at again.  All the code that uses the data simply works with a Report with no idea what type of report it is.  Reports have a number of items in them, some report-wide named fields and each line has named fields.  The field names likewise come from the configuration.</p>
<p>I come originally from games programming and while it might seem to fit to have <code>mammals</code> and <code>animals</code> and so forth as abstract concepts in a game engine, I've found fewer worst cases than games where you want to obliterate all those abstractions and reach around them.</p>
<p>The problem in my opinion is with the concept of "is". A proper inheritance hierarchy that conforms to principles like Lisksov substitution revolves around the concept of substitutability. Yet we don't want to downcast away the abstraction down to the concrete, but we don't want the concrete details to leak into the abstraction. So we're trying to determine what something can do based on what it roughly is, but not what it actually is. Yet what is "roughly is" isn't often enough information to do what we want to do with it (ex: determine if two animals can reproduce with each other), but what "actually is" gets us too far, since there might be many things that aren't "actually "are that thing but have the same functionality available, so why should we have to check and sprinkle redundant code in our codebase?</p>
<p>If we want to model human intuition, then the functionality that things have are never based on what they "are". It's based on what they "have". A biped with crippled legs can't walk upright. It doesn't matter that is a form of biped, or that bipeds can usually walk. A broken microwave can't heat food up even if it's a type of microwave. A mute human can't talk. It doesn't matter that they are human. It's based on what things "have", not what they "are", that determines what they are capable or incapable of doing. It's based on having functional legs that can allow something to walk.</p>
<p>The broad problem I find with inheritance which narrows its most natural applicability to limited contexts is that it wants to say what things can do based on what they "are", not what they "have". And that can get us reaching for the most granular concept of determing is something is a form of "IWalkable", to determine if something can walk, when we're really just concerned if they "have" functional legs. And inheriting/implementing from IWalkable typically removes the ability from being able to remove it at runtime if a person trips over a rock and breaks both of their legs.</p>
<p>What is a dragon, you know? Is it a type of bird? A type of reptile? Both? Neither? If we have an established inheritance hierarchy, we might debate for ages. Or maybe we don't and still try to base it on interfaces like it's "IQuadruped", and "IFlyable", and "IFireBreathable". But what if its wings are crippled? We can debate endlessly, and we're trying to reach a wavelength with the rest of the team. And in my opinion, the reason that connection is elusive is that we're focusing on what it "is". How about we talk about what a dragon "has"? It can have, at least initially, super-strong scales, wings that allow it to fly, four legs that can allow it to walk on the ground, some internal engine that allows it to breathe fire. We probably won't debate too much on what it "has". And we can leverage much more in the way of polymorphism if we revolve it all around what it "has", not what it "is", without changing our minds later.</p>
<p>The only real reason in OO software to specialise a type is to change its behaviour.</p>
<p>It seems unlikely that the IT system of a garage will have any difference in behaviour between a car, a van or a truck, or that a vet's system will have a difference in behaviour between dog or other animals. Usually there will be differences in values in a field to indicate vehicle type or species.</p>
<p>Simulation systems tend to break entities into multiple facets, so again the difference between a vehicle which is a car and a vehicle which is a truck would be in value, but often those values will be specialised <a href="https://en.wikipedia.org/wiki/Decorator_pattern" rel="nofollow noreferrer">decorators</a></p>
<p>If you had a software specialised to a very specific car or dog related purpose, you might call the entity 'car' or 'dog' rather than 'customer's vehicle' or 'patient animal', but you then wouldn't have any inheritance, as the domain you're dealing with is narrowed to just cars or dogs.</p>
<p>That said, I have seen OO inheritance used for other purposes, for example a model of the space shuttle where multiple inheritance was used to combine components, so the shuttle inherited from its left wing and its right wing and so on. I'm sure such a programmer could come up with a real world case where dog and car inherit from something else, or maybe each other.</p>

software - What is the meaning of the quote: "A bug in the code is worth two in the documentation."? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416650/what-is-the-meaning-of-the-quote-a-bug-in-the-code-is-worth-two-in-the-documen
<p>As I boot up Eclipse for C++ with the <a href="https://marketplace.eclipse.org/content/darkest-dark-theme-devstyle" rel="noreferrer">"Darkest Dark Theme with DevStyle"</a> installed, it spits out quotes--one per day. Yesterday's was:</p>
<blockquote>
<p>A bug in the code is worth two in the documentation.</p>
</blockquote>
<p>Talk about ambiguous! <strong>What does that mean?</strong></p>
<p>A <a href="https://www.google.com/search?sxsrf=ALeKk01ws4V3dUQt0fw8pA4sqeeKI-7mrA%3A1602015808821&amp;ei=QNJ8X83QMefO0PEP8IezuAw&amp;q=%22A%20bug%20in%20the%20code%20is%20worth%20two%20in%20the%20documentation%22%20meaning&amp;oq=%22A%20bug%20in%20the%20code%20is%20worth%20two%20in%20the%20documentation%22%20meaning&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzoECAAQR1CU0wFYhesBYIrtAWgAcAN4AIABgAGIAegBkgEDMC4ymAEAoAEBqgEHZ3dzLXdpesgBCMABAQ&amp;sclient=psy-ab&amp;ved=0ahUKEwjN8NX55aDsAhVnJzQIHfDDDMcQ4dUDCA0&amp;uact=5" rel="noreferrer">Google search for it</a> (and <a href="https://www.google.com/search?sxsrf=ALeKk00CR9xSErpK3j_G6NsvFwb90nUV5w%3A1602018933762&amp;ei=dd58X-H8Ldi70PEPrNuQuAQ&amp;q=A%20bug%20in%20the%20code%20is%20worth%20two%20in%20the%20documentation&amp;oq=A%20bug%20in%20the%20code%20is%20worth%20two%20in%20the%20documentation&amp;gs_lcp=CgZwc3ktYWIQAzIECCMQJzIECCMQJzIECAAQHjoECAAQRzoHCAAQyQMQHlC9cliXgwFglYUBaABwA3gAgAF9iAHwAZIBAzAuMpgBAKABAaoBB2d3cy13aXrIAQbAAQE&amp;sclient=psy-ab&amp;ved=0ahUKEwihi-HL8aDsAhXYHTQIHawtBEcQ4dUDCA0&amp;uact=5" rel="noreferrer">this one too</a>) shows it is a rather popular quote.</p>
<p>Possible meanings:</p>
<ol>
<li>(what I'd like it to mean, but what it isn't really saying well in the least): documentation is so important that it takes 2 bugs in the documentation to equal 1 bug in the code, so even if documentation has bugs (meaning: errors, or is out-of-date), it's still better to have the documentation than not to have it.</li>
<li>A single bug fix in the code creates 2 bugs in the documentation unless you update the documentation in 2 places.
<ol>
<li>Ramifications and implications: don't have documentation--it's too hard to keep up with code changes and bug fixes in the code.</li>
</ol>
</li>
<li>1 work unit of effort from a developer is enough to fix 1 code bug or 2 documentation bugs.
<ol>
<li>Ramifications and implications: unknown</li>
</ol>
</li>
<li>1 work unit of effort from a developer is enough to fix 1 documentation bug or 2 code bugs.
<ol>
<li>Ramifications and implications: unknown</li>
</ol>
</li>
<li>It's better to have bugs (errors) in the documentation than bugs in the code.</li>
<li>It's better to have bugs in the code than bugs (errors) in the documentation.</li>
</ol>
<p>It appears to be a twist on "A bird in the hand is worth two in the bush" - meaning you should hold on what you have rather than risk losing it for something more. That sentiment can make sense in software engineering, but I don't see how the modification makes sense when you try to parse it as a derivation:</p>
<blockquote>
<p>Better to hang on to a bug in the code, than risk losing it to introduce two in the documentation</p>
</blockquote>
<p>The original meaning clearly makes no sense. You can twist it in plenty of ways:</p>
<ul>
<li>Bugs in code are about twice as bad as bugs in documentation</li>
<li>Better to keep a code bug that is well described in the docs, than to fix it and have outdated docs</li>
<li>Bugs in the code take twice the effort to fix compared to bugs in documentation</li>
<li>Etc.</li>
</ul>
<p>But I see no reason to prefer any of these meanings, and without context or attribution I can only insert my own values.</p>
<p>Most matches are on sites relating to "computing humor", along other quotes such as "The definition of an upgrade: Taking old bugs out and putting new bugs in". Given that, plus the open-ended meaning, I think it is simply a funny substitution, and that we shouldn't try to read into it more than that.</p>
<p>Let's start from the original:</p>
<blockquote>
<p>Taken from the proverb "a bird in the hand is worth two in the bush," which means that having something, even if it is a lesser quantity, is better than taking the chance of losing it in order to attain something else that seems more desirable.</p>
</blockquote>
<p>In short, it's better to have one bird than it is to have a chance at catching multiple birds.</p>
<p>The important thing to notice here is that "having a bird" is a <strong>positive</strong> thing. The main incentive is to have a bird. The former option (having one bird in the hand) is <em>better</em>, because having a bird is <em>good</em>.</p>
<p>You could rephrase the proverb as</p>
<blockquote>
<p>Having a bird in the hand is twice as good as having one in the bush</p>
</blockquote>
<p>Having a bug, however, is a <strong>negative</strong> thing. The main incentive is to not have it. This means that the good/bad scales are inverted for this bug-in-the-code proverb.</p>
<p>The former option (having a bug in the code) is <em>worse</em>, because having a bug is <em>bad</em>.</p>
<p>Therefore, the bug-in-the-code proverb roughly translates to</p>
<blockquote>
<p>Having a bug in the code is twice as bad as having one in the documentation.</p>
</blockquote>
<p>Which is your option #5.</p>
<p>Without further context, I'd take it to mean that bugs are more expensive to fix when they are in code as opposed to in documentation (roughly your point 3.).</p>
<p>This can be expanded - "bugs" in specification/requirements are usually more expensive to fix than bugs in code (as they imply changes to system/integration tests, may affect API or even UI design, etc.) if they are only detected after being implemented.</p>
<p>More generally - a fault in any artefact (document/code/binary) becomes more expensive to fix with every other artefact depending on it. The exact ratio of the increase in cost is hard to measure, but some books on testing strategies claim a factor of 10 for each phase of the software developement lifecycle that passes without the problem being detected.</p>
<p>Depending on the lifecyle model, this could mean<br>
System design &gt; Architecture design &gt; Implementation &gt; User Documentation</p>
<p>Meaning that a fault in system design found during architecture design costs roughly as much as a fault in architecture design found during implementation. If a problem is found once the software is released, fixing issues in documentation is relatively easy, but fixing system design issues may be completely infeasible for economic reasons.</p>
<hr>
<p>That said, being not a native speaker, I have missed the reference to the proverb the other answers have picked up. Although there is a corresponding proverb in my native language (German), it compares size/quality of the potential vs. actual birds instead of quantity.</p>
<p><a href="https://softwareengineering.stackexchange.com/a/416652/170541">@Jacob Raihle is spot-on I think when he said</a>:</p>
<blockquote>
<p>Most matches are on sites relating to "computing humor", along other quotes such as "The definition of an upgrade: Taking old bugs out and putting new bugs in". Given that, plus the open-ended meaning, I think it is simply a funny substitution, and that we shouldn't try to read into it more than that.</p>
</blockquote>
<p>I see that now. <strong>Almost every site the quote was found on was intended as computer humor.</strong> Ex: <a href="https://www.usewisdom.com/fun/computer.html" rel="nofollow noreferrer">this page's</a> title is "Computer Humor".</p>
<p>So, it truly is meant to be a funny substitution for:</p>
<blockquote>
<p>A bird in the hand is worth two in the bush.</p>
</blockquote>
<p>...with the new, humorous meaning of:</p>
<blockquote>
<p>Better to hang on to a bug in the code, than risk losing it to introduce two in the documentation.</p>
</blockquote>
<p>How ridiculous. I've gotten some really good and meaningful quotes from that startup splash screen, so I didn't expect to see a ridiculous one like this, and I didn't have the context for where it came from ("A bird in the hand..."). Anyway, that's the meaning.</p>
<p>So, I'll leave you with one of my own:</p>
<blockquote>
<p>I understand crossing your fingers is a form of debugging. If it doesn't pass, cross your fingers and try again.</p>
<p>- said nobody ever<br>
(<a href="https://github.com/ElectricRCAircraftGuy/eRCaGuy_dotfiles/blob/master/git%20%26%20Linux%20cmds%2C%20help%2C%20tips%20%26%20tricks%20-%20Gabriel.txt" rel="nofollow noreferrer">by Gabriel Staples, 25 June 2020</a>)</p>
</blockquote>

object oriented - How could a computer program do anything if everything is immutable? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416423/how-could-a-computer-program-do-anything-if-everything-is-immutable
<p>I feel this is a bad question because I probably do not understand what I am talking about. In my effort to learn about functional programming, I became stumped on understanding the idea of immutable stuff. I have been using C# as a hobby for years and I think I do not even understand OOP principles very well.
I use a class as a bucket of public and private data with methods pinned to it. It's partially mutable and partially immutable I guess?
So I sort of want to step away from comparing and contrasting OOP and pure FP for a second and just think about "mutable" (can change)  and "immutable" (cannot change) stuff.</p>
<p>People say it is good to make things immutable and I believe them. <strong>But how can a program do anything if you cannot change data?</strong> Whether you're talking FP or OOP, it seems that you need at least one giant mutable data structure (like a database) since all your functions or objects are immutable. But that sounds very impractical. I can think of it this way: x = f1(f2(f3(f4(f5( y ))))) where y is the user input and x is the output. The program is the immutable functions 1 through 5. But again, this appears very impractical. I think I understand the benefits of immutable things but I just don't understand how to use them properly for a large program.</p>
<p>Again, consider me a baby in the programming world. I would appreciate book or book chapter recommendations. And feel free to tell me if I'm asking the wrong question.</p>
<p><strong>Mutable:</strong></p>
<pre><code>public void DoubleArray(int[] array)
{
    for (int i=0; i&lt;array.length; i++)
        array[i] *= 2;
}
</code></pre>
<p><strong>Immutable:</strong></p>
<pre><code>public int[] DoubleArray(int[] array)
{
    int[] result = new int[array.length];

    for (int i=0; i&lt;result.length; i++)
        result[i] = array[i] * 2; 

    return result;
}
</code></pre>
<p>See the difference?  The immutable code is perfectly feasible.  In fact, this is how strings are treated in many languages, including Java and C#.</p>
<p>Some nice things about immutability:</p>
<ol>
<li><p>Your code is easier to reason about, particularly in a multi-threaded context, because you don't have to worry about anything being modified.</p>
</li>
<li><p>You get a running history of "changes."</p>
</li>
<li><p>You can "memoize," which can actually improve performance.</p>
</li>
</ol>
<p>Here's what most people seem to miss about immutability. Consider the following function:</p>
<pre class="lang-scala s-code-block hljs"><code><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">factorial</span></span>(n: <span class="hljs-type">Int</span>): <span class="hljs-type">Int</span> = <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> n * factorial(n - <span class="hljs-number">1</span>)
</code></pre>
<p>This function is completely immutable. So does <code>n</code> ever change? Yes and no. One instance of <code>n</code> doesn't change, but you quite frequently get a completely new <code>n</code> and the reference to the old <code>n</code> is lost. <code>n</code> can even simultaneously refer to different values in different threads or different levels of the stack within the same thread.</p>
<p>This is how immutable programs 'change' things. Multiply this effect by every function in the program and there is quite a bit of apparent change going on, but within any given function everything is constant. It's almost paradoxical.</p>
<p>You are correct that perfectly immutable program, one that relies only on it's input when started wouldn't be much useful.</p>
<p>But the idea of immutability is not to make program completely immutable, it is to <strong>abstract the mutable state away</strong> and <strong>push the mutable state to the edges of the program</strong>. This way, the actual core of the program, the one written by a programmer of an application can be immutable. There will still be mutability, but it will be hidden in libraries. Which means that programmer won't come into contact with (arguably dangerous) mutable state.</p>
<p>I'm not an expert on functional programming and immutable state, but two ideas come to mind.</p>
<p><a href="https://www.haskell.org/tutorial/io.html" rel="noreferrer">IO monad</a> is how input/output of functinal/immutable program can read and write into it's mutable state. Imagine a function <code>readCharacter():Func&lt;IO,Char&gt;</code>, this function when called, returns another function, which reads IO and returns character. The whole point of this is that many such function, which work on IO, can be compose together which would result into something like <code>Program(IO)</code>. This program then takes IO into its outpu and it's inside can be perfectly immutable, pure and won't know it is actually doing side effects.</p>
<p>Second idea is that of <a href="https://en.wikipedia.org/wiki/Reactive_programming" rel="noreferrer">reactive programming</a>. In this paradigm, the central concept is that of stream of events. Those events can be inputs like keypresses, mouse clicks or files received over the network, or outputs, like changing text on a screen or sending a file. Then, methods can be applied to those streams to filter them, transform them, join them and do all kind of shenanigans with them. Then, your program could very well be one that has one input of stream of events and one output of stream of events and everything in the middle is immutable and pure. The mutability is hidden in the implementation of the streams and methods operating on those streams. This is how functional/immutable UIs can be made.</p>

terminology - In MVC, is the router considered one part of the controller? Or are they considered separate entities? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416610/in-mvc-is-the-router-considered-one-part-of-the-controller-or-are-they-conside
<p>I'm learning to implement RESTful APIs, and the concepts of Controller and Router are common in many frameworks, along with the MVC pattern in general, so I'm encountering them everywhere.</p>
<p>From <a href="https://softwareengineering.stackexchange.com/q/135495/123149">this question</a> and googling around I understand that they are not the same thing, as they are responsible of very specific, and different, actions. But one thing isn't clear: design-wise, is the router considered part of the controller?</p>
<p>In the mentioned question, one user comments:</p>
<blockquote>
<p>You only need a model (database), a controller (which is the router), and the view (a page). That's it. If you have a Router and a Controller then you've over complicated it and are just using the Router to pass data to a Controller. A Controller is a Router, but a Router is not a Controller.</p>
</blockquote>
<p>I often see routers and controllers on the same file, but it's very common to separate them in different files and/or directories. From this I understand that they are intimately related, but sometimes it's better to separate them to implement separation of responsibilities, and to make our codebase modular and easier to maintain.</p>
<p>Also in the mentioned question, we can see answers considering the router part of the controller layer, but others treating it as a different entities. Both can make sense in a thought experiment:</p>
<ul>
<li>Maybe you consider the router to exist before the MVC, as in one MVC per page. The router maps to the controller, but it's not considered part of the controller itself.</li>
<li>Maybe you consider the router to be part of the controller, as in the whole webpage is one monolithic implementation of MVC. The router maps to the controller because one is part of the other.</li>
</ul>
<p>This scenario is very subjective, but in the context of software architecture and design, is the MVC pattern more specific or clear about the roles and structure of routers and controllers?</p>
<p>In other words, is the router a module inside the controller, or is the router considered a separate actor (MVCR perhaps)?</p>
<p>How to you write the word "<em>computer</em>" in ancient latin language? Nobody knows, because for sure, there were no computers in the roman empire ;-)</p>
<p>The MVC architectural model was designed in the 70s to address a clean separation of responsibility and decoupling the "application" logic (Model) from the user interface (Views for the display,  Controller for the input).</p>
<p>When we come to distributed architectures, we have a couple more concerns to add to our architectural design. Since routing was obviously not relevant in early MVC,  you have the choice:</p>
<ul>
<li>Stick to the MVC concept with some interpretation: in this regard, routing is indeed closer to the C than to anything else;</li>
<li>Shift to a web-contemporary MVP architecture, in which the P takes a central role of being not only a (distributed) controller but also playing the role of a middleperson between M and V.   In this context,  the router is without hesitation part of the P.</li>
<li>Or use any other architecture model that better expresses the needs.  "MVCR" has the advantage of being less artificial than MVC, but has the inconvenience, that there's no literature about how R should relate to the others.  And don't forget that you're not limited to MVxxx - you may as well consider a Clean Architecture and similar</li>
</ul>
<p>Your question is rife with "if A then B" and "A XOR B" suppositions, where there is no logical connection between A and B.</p>
<p>It's so persistently present in your question that it pretty much invalidates or otherwise distracts from the arguments you're trying to make.</p>
<p>Don't get me wrong, it's good that you're trying to learn and critically think about what you are learning. The problem here is that the question you're asking isn't the issue, it's the incorrect basis on which your question is grounded.</p>
<p>This answer mostly addresses those incorrect suppositions, which will hopefully steer your understanding of the terms you use in your question, which in turn should help in understanding why the way you're thinking about certain things just isn't quite right.</p>
<hr>
<p>"Are they considered separate entities" is always a matter of scope.</p>
<p>As a backend developer, I generally speak about "the frontend" as if it were one entity. It's not, and I know it isn't, but from my position there's no point in distinguishing between the individual components of something I don't work with.</p>
<p>To someone looking at MVC close up, the router and controller are two very separate entities. To someone looking at MVC as "the presentation layer", they'll generally not bother to distinguish between them as entities.</p>
<p>This is very important to remember when you're using things like comments posted online as a reference source. If the thread isn't focusing on MVC up close, the comments you read are more likely to lump the presentation logic into a single indistinguishable blob - even though it isn't - because there's no benefit to making that distinction then and there.</p>
<p>As an aside, "entity" itself is already poorly defined. In OOP terms, it generally equates to "non-data-only class", but even that definition is up for grabs.</p>
<hr>
<blockquote>
<p>I understand that they are not the same thing, as they are responsible of very specific, and different, actions. But one thing isn't clear: design-wise, is the router considered part of the controller?</p>
</blockquote>
<p>SRP dictates that classes should have only one responsibility. Understanding that controllers and routers have specifically different responsibilities should raise a flag that in any clean codebase they would be separated into separate classes.</p>
<hr>
<blockquote>
<p>In the mentioned question, one user comments: <em>"You only need a model (database), a controller (which is the router), and the view (a page). That's it."</em></p>
</blockquote>
<p>Well, no. The business and persistence layers (or if you prefer DDD: Domain, Application and Infrastructure layers) are notably missing here, among others.</p>
<p>This comment is so excessively and naively oversimplified that, when taken at face value, it is advocating for something that is widely agreed to be bad practice. In this proposed system, you'd be accessing the database directly from the controller, as there would only be a database/controller/view, right? What about permission/authorization logic? Well, since it's logic, it should be directly implemented into the controller then, since there's no other place to put it. Since there isn't even a (MVC) model in this proposed system, how are we getting that data from the database to the view?</p>
<p>If that doesn't raise some red flags, then you've got significantly bigger fish to fry than the question you posted here.</p>
<hr>
<blockquote>
<p>we can see answers considering the router part of the controller layer, but others treating it as a different entities</p>
</blockquote>
<p>"Are they separate entities" and "Are they on separate layers" are not the same question.</p>
<p>What you stated here isn't a contradiction. They're in the same layer, but they're not mashed into a single entity. That just means that this layer has more than one entity - which applies to pretty much every code layer I've ever come across.</p>
<hr>
<blockquote>
<p>Maybe you consider the router to exist before the MVC, as in one MVC per page.</p>
</blockquote>
<p>MVC is generally taken to mean the architectural approach to separating your presentation logic into controllers, models and view. MVC is not a countable unit of "one specific controller, one specific model, and one specific view".</p>
<blockquote>
<p>Maybe you consider the router to be part of the controller, as in the whole webpage is one monolithic implementation of MVC. The router maps to the controller because one is part of the other.</p>
</blockquote>
<p>"the whole webpage is one monolithic implementation of MVC" sums up what I just said. But the second sentence is in no way related or a logical consequence of the first sentence.</p>
<p>Be very careful about what you mean with "maps to". It expresses a one-way projection, e.g. I would say that a (data) entity <em>maps to</em> a DTO, but that is not the same relationship as exists between a router and a controller.</p>
<p>A <em>route</em> maps to a specific <em>controller action</em>, but that's not the same as a router mapping to a controller.</p>
<hr>
<blockquote>
<p>In other words, is the router a module inside the controller, or is the router considered a separate actor (MVCR perhaps)?</p>
</blockquote>
<p>Again, these are not two distinct options.</p>
<p>You've completely glossed over the possibility of having two separate classes each with a distinct responsibility (therefore respecting SRP) using composition to connect one to the other.</p>
<p>The fact that such classes would use composition does not somehow "make them the same entity". That's a completely unrelated consideration.</p>
<hr>
<blockquote>
<p>MVCR perhaps?</p>
</blockquote>
<p>MVC does not imply that the code <em>only</em> contains models, views and controllers. "MVC" is not an all-inclusive list of every kind of component in your codebase.</p>
<hr>
<blockquote>
<p>in the context of software architecture and design, is the MVC pattern more specific or clear about the roles and structure of routers and controllers?</p>
</blockquote>
<p>You've got to separate the <em>route</em> from the <em>router</em>.</p>
<ul>
<li>The <em>route</em> is invariably tied to the specific controller actions it routes to.</li>
<li>The <em>router</em> is a piece of reusable logic that connects an incoming web request to the appropriate controller action/route it belongs to.</li>
</ul>
<p>The router being <strong>reusable</strong> logic indicates that it's ripe for abstracting into a class of its own. There'd be nothing to gain from rewriting all that logic for every controller you create.</p>
<p>That being said, specific implementation details are generally left up to the framework itself, and there are several MVC frameworks to choose from.</p>
<p>I can't exclude the possibility that there exists some MVC framework where the routing is done via boilerplated logic inside the controller. I'd very strongly question the quality of the framework, but I can't exclude the possibility of it existing.</p>
<p>I don't know all MVC frameworks by heart, and I don't think that's really the point of your question to begin with - since you're asking about the general concept of MVC rather than a specific framework.</p>
<p>When it comes to distributed 3-tier/n-tier/MVC architectures, routing is part of what's often called the controller layer.</p>
<p>However, within that controller layer, it is a responsibility that can be easily separated out and largely reused. If and how this separation happens is implementation-defined. Some frameworks provide declarative routing, like Spring, and some frameworks provide programmable routing, like Go http. So, if and how much routing you see in the actual controller does not really depend whether you use a multi-tier architecture but rather on the actual framework used.</p>
<p>The Router is the dispatch mechanism for the Controller. As such, you can see it as either a convenience controller boilerplate, or as a separate entity, so your MVCR assumption is correct.</p>

javascript - Is this extensive usage of closure a known (anti-)pattern? And does it have a name? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416412/is-this-extensive-usage-of-closure-a-known-anti-pattern-and-does-it-have-a-na
<p>I often use function closures for storing data (e.g. database URL), which doesn't change between function calls. Is this an (anti-)pattern? Does it have a name?</p>
<hr>
<p>While developing apps, which recieve data, process and send data (using a variety of protocolls), I stumpled upon this recurring problem:</p>
<p>A functions needs 4 or more paramters to performe it's task, while only one (or two) of these parameters change between calls.
E.g.:(1) A function sending data, which needs the ip-address and the port of the destination, something for authorization and the data to send.
E.g.:(2) A function processing raw data into the format of a database, which needs information about the raw data, the database and the raw data itself.</p>
<p>My original approach was to store this information where the function is called and just pass it everytime I call the function. But I find this quite hard to read, so I searched for a solution to store the constant parameters elsewhere. One thing I considered, was packing these into objects, but JS does not support private and constant attributes + this functions are often used as callback functions.</p>
<p>Of course I could use <code>method_name.bind(the_object); </code>, but using <strong>closures</strong> seemed to solve the problem as well, wouldn't require usage of ````this``` and seemed more 'functional' than the other approach and therefore more fit for JS.</p>
<p>So my implementation of such a function usually looks like this:</p>
<pre class="lang-js s-code-block hljs javascript"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create_processData</span>(<span class="hljs-params">schema, connectionInfosForAnotherDB, (...)</span>)</span>{

    <span class="hljs-keyword">const</span> someImportantInfo = getTheInfoFromAnotherDB(connectionInfosForAnotherDB);
    <span class="hljs-keyword">const</span> interpretationOfThatInfo = interpretThatInfo(someImportantInfo);
    <span class="hljs-keyword">let</span> processedMessageCounter = <span class="hljs-number">0</span>;

    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span>(<span class="hljs-params">data</span>)</span>{
        <span class="hljs-comment">//do the processing using the schema and the interpretationOfThatInfo</span>
        <span class="hljs-comment">//also use the processedMessageCounter</span>
        processedMessageCounter++;
        <span class="hljs-keyword">return</span> processedData;
    }
    <span class="hljs-keyword">return</span> processData;

}
<span class="hljs-built_in">module</span>.exports = create_processData;
</code></pre>
<p>I have a function (create_processData) which setUps everything the actual function(processData) needs to work and save it's in it's closure, so that the actual function can access it. Then I return a reference to the actual function.</p>
<p>Code which uses this function would look like this:</p>
<pre class="lang-js s-code-block hljs javascript"><code><span class="hljs-keyword">const</span> create_processData = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./the_path/processData"</span>);
<span class="hljs-keyword">const</span> processData = create_processData(...);

<span class="hljs-comment">//use the processData function in a callback or something similar </span>
</code></pre>
<p>Unfortunatly, this doesn't provide the clearity of code I wanted to achieve (while enabling a whole lot of encapsulation and keeping data only where it is needed - which I do like). In addition to that, a the code feels hard to understand, but this may just be a result of me beeing used to OOP and beeing unfamilier to functional programming (I don't have a exhaustive experience or knowledge of both of them).</p>
<p>I tried to do some research about this, but I didn't find anything usefull. Probably, this is due to a lack of vocabulary for this type of problem, pattern etc.</p>
<p>So: is this a known (anti-)pattern or problem? Does it have a name?
(Or is there just an obvious flaw in my thinking, which just isn't obvious to me?)</p>
<p>This is just using closures.</p>
<p>When you're from an OO background building and using a closure ends up feeling like using constructors/factories and methods, respectively. The big difference is you just get the one "method". Oh and you don’t get any of that silly <code>new</code> business anymore.</p>
<p>Of course functions are first class citizens here and can be shoved into variables that give them new names. So there are other differences as well. But the state of the "enclosing scope" of a closure can end up feeling very much like the state of an object.</p>
<p>Look up currying and binding if you want to get deep into this.</p>
<p>I don't see an anti pattern here. Just use good names.</p>
<p>As @candied_orange mentioned, what you're doing there is very similar to currying. Its worth learning about.</p>
<p>Javascript arrow functions were designed to allow for easy currying. An example of a fully curried function:</p>
<pre class="lang-js s-code-block hljs javascript"><code><span class="hljs-comment">// Definition</span>
<span class="hljs-keyword">let</span> dbRequest = <span class="hljs-function"><span class="hljs-params">connectionInfo</span> =&gt;</span> <span class="hljs-function"><span class="hljs-params">options</span> =&gt;</span> <span class="hljs-function"><span class="hljs-params">query</span> =&gt;</span> {
  <span class="hljs-comment">// ...</span>
}
<span class="hljs-comment">// Usage:</span>
myConnectionInfo = ...
myOptions = ...
let doQuery = dbRequest(myConnectionInfo)(myOptions)
doQuery(myQuery)
</code></pre>
<p>However, you can do "partial function application" without currying by moving the job of function splitting to the consumer of your API.</p>
<pre class="lang-js s-code-block hljs javascript"><code><span class="hljs-comment">// Definition</span>
<span class="hljs-keyword">let</span> dbRequest = <span class="hljs-function">(<span class="hljs-params">connectionInfo, options, query</span>) =&gt;</span> {
  <span class="hljs-comment">// ...</span>
}
<span class="hljs-comment">// Usage:</span>
myConnectionInfo = ...
myOptions = ...
doQuery = <span class="hljs-function">(<span class="hljs-params">query</span>) =&gt;</span> dbRequest(myConnectionInfo, myOptions, query)
doQuery(myQuery)
</code></pre>
<p>You may find these shorthand syntax examples helpful in general, but because you're doing an expensive operation with the first parameter that shouldn't be repeated, some tailoring would be needed.</p>
<p>What your code actually reminds me of is a factory function (effectively an alternative way to get class-like behavior, which some people prefer).</p>
<pre class="lang-js s-code-block hljs javascript"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createDbConnection</span>(<span class="hljs-params">connectionInfo, options</span>) </span>{
  <span class="hljs-comment">// Expensive (or non-expensive) setup</span>
  <span class="hljs-keyword">return</span> {
    query() { ... },
    <span class="hljs-comment">// Any other functions you might want to provide</span>
  }
}
</code></pre>
<p>What you currently have works just fine also, I would be able to understand that code just fine if I found it in a codebase. But hopefully these other possibilities can help expand your toolset.</p>
<p>Functions are objects. The have but one entry point instead of multiple methods but this limitation does not change their basic nature. Closures are configurable objects. When closures capture references to mutable data, or if they are allowed to directly write to their captured values (using upvalues, like in JS or Lua), they can even be stateful objects.</p>
<p>It is very convenient to not have to write a class for creating an object but please take extreme care for readability and immediate understandability of what you're doing / the API that you are providing when writing stateful closures 😉</p>

history - What are programming languages written in? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/417935/what-are-programming-languages-written-in
<p>This is my first question so be nice lol...</p>
<p>Think of it this way. Python is written in C, which is written in an older C compiler, which is written in an even older C compiler, which is written in B, which is written in (I think) BCPL. I am not sure what BCPL is written in, but it seems that there must be an original language somewhere?</p>
<p>In other words, every programming language is written in an older programming language. So what came first, and what was that coded in?</p>
<blockquote>
<p>What are programming languages written in?</p>
</blockquote>
<p>Programming language compilers and runtimes are written in programming languages — not necessarily languages that are older or are different than the one they take as input.&nbsp; Some of the runtime code will drop into assembly to access certain hardware instructions or code sequences not easily obtained through the compiler.</p>
<hr>
<p>Once <a href="https://en.wikipedia.org/wiki/Bootstrapping_(compilers)" rel="noreferrer">bootstrapped</a>, programming languages can <a href="https://en.wikipedia.org/wiki/Self-hosting_(compilers)" rel="noreferrer">self-host</a>, so they are often written in the same language they compile.&nbsp; For example, C compilers are written in C or C++ and C#'s Roselyn compiler is written in C#.</p>
<p>When the Roselyn compiler adds a new language feature, they won't use it in the source code for the compiler until it is debugged and working (e.g. released).&nbsp; This akin to the bootstrapping exercise (limited to a new feature rather than the whole language).</p>
<p>But to be clear, there is the potential (and often realized) for the programming language to be written in the latest version of its input language.</p>
<hr>
<blockquote>
<p>So what came first, and what was that coded in?</p>
</blockquote>
<p>Machine code came first, and the first assemblers were themselves very very simple (early assembly languages were very easy to parse and generate machine code for), they were written in machine code, until bootstrapped and self-hosted.</p>
<blockquote>
<p>Think of it this way. Python is written in C,</p>
</blockquote>
<p>No, it is not.</p>
<p>You seem to be confusing a <em>Programming Language</em> like Python or C with a Programming Language <em>Implementation</em> (e.g. a <em>Compiler</em> or <em>Interpreter</em>) like PyPy or Clang.</p>
<p>A <em>Programming Language</em> is a set of semantic and syntactic rules and restrictions. It is just an idea. A piece of paper. It isn't "written in" anything (in the sense that e.g. Linux is "written in" C). At most, we can say it is written in English, or more precisely, in a specific <em>jargon</em> of English, a semi-format <em>subset</em> of English extended with logic notation.</p>
<p>Different specifications are written in different styles, here is an example of some specifications:</p>
<ul>
<li>The <a href="https://docs.oracle.com/javase/specs/jls/se15/html/" rel="noreferrer">Java Language Specification</a></li>
<li>The <a href="https://scala-lang.org/files/archive/spec/2.13/" rel="noreferrer">Scala Language Specification</a></li>
<li>The <a href="https://haskell.org/onlinereport/haskell2010/" rel="noreferrer">Haskell 2010 Language Report</a></li>
<li>The <a href="https://small.r7rs.org/attachment/r7rs.pdf" rel="noreferrer">Revised<sup>7</sup> Report on the Algorithmic Language Scheme</a></li>
<li>The <a href="https://tc39.es/ecma262/" rel="noreferrer">ECMA-262 ECMAScript® Language Specification</a></li>
<li>Python does not really have a single Language Specification like many other languages do, the information is kind of splintered between the <a href="https://docs.python.org/3/reference/" rel="noreferrer">Python Language Reference</a>, the <a href="https://python.org/dev/peps/" rel="noreferrer">Python Enhancement Proposals</a>, as well as a <em>lot</em> of implicit institutional knowledge that only exists in the collective heads of the Python community</li>
</ul>
<p>There are multiple Python implementations in common use today, and only one of them is written in C:</p>
<ul>
<li><a href="https://brython.info/" rel="noreferrer">Brython</a> is written in <a href="https://tc39.es/ecma262/" rel="noreferrer">ECMAScript</a></li>
<li><a href="https://ironpython.net/" rel="noreferrer">IronPython</a> is written in <a href="https://docs.microsoft.com/dotnet/csharp/" rel="noreferrer">C#</a></li>
<li><a href="https://jython.org/" rel="noreferrer">Jython</a> is written in <a href="https://java.com/" rel="noreferrer">Java</a></li>
<li><a href="https://github.com/graalvm/graalpython" rel="noreferrer">GraalPython</a> is written in Java, using the <a href="https://github.com/oracle/graal/tree/master/truffle" rel="noreferrer">Truffle</a> Language Implementation Framework</li>
<li><a href="https://pypy.org/" rel="noreferrer">PyPy</a> is written in the <a href="https://rpython.readthedocs.io/en/latest/rpython.html" rel="noreferrer">RPython Programming Language</a> (a statically typed language roughly at the abstraction level of Java, roughly with the performance of C, with syntax and runtime semantics that are a proper subset of Python) using the <a href="https://rpython.readthedocs.io/" rel="noreferrer">RPython Language Implementation Framework</a></li>
<li><a href="https://github.com/python/cpython" rel="noreferrer">CPython</a> is written in <a href="https://wikipedia.org/wiki/C_(programming_language)" rel="noreferrer">C</a></li>
</ul>
<blockquote>
<p>In other words, every programming language is written in an older programming language. So what came first, and what was that coded in?</p>
</blockquote>
<p>Again, you are confusing <em>Programming Languages</em> and <em>Programming Language Implementations</em>.</p>
<p><em>Programming Languages</em> are written in English. <em>Programming Language Implementations</em> are written in Programming Languages. They can be written in <em>any</em> Programming Language. For example, Jython is a Python implementation written in Java. GHC is a Haskell implementation written in Haskell. GCC is a C compiler written in C. <code>tsc</code> is a TypeScript compiler written in TypeScript. <code>rustc</code> is a Rust compiler written in Rust. NSC is a Scala compiler written in Scala. <code>javac</code> is a Java compiler written in Java. Roslyn is a C# compiler written in C#.</p>
<p>And so on and so forth, there really is no restriction on the language used to implement a compiler or interpreter. (There is a theoretical limitation in that an <em>interpreter</em> for a Turing-complete language must also be written in a Turing-complete language.)</p>
<p>Each machine has an instruction set it natively executes.</p>
<p>That instruction set is the first language.</p>
<p>The first higher level language was assembly, literally allowing the programmer to write a long expression like <code>mov ax bx</code> instead of the corresponding binary word.</p>
<p>The first compiler was written in machine language, though more accurately it would have been called an assembler but today's standards. It would have taken the assembly language and translated it to the binary encoding.</p>
<p>This has happened many times over for many different machines until the first cross-compilers were developed that could rewrite a program into another machine language.</p>
<p>Even now though there are still languages who are first implemented in terms of a machine language.</p>

object oriented - Is allowing making member variables private considered a feature of OOP? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/417888/is-allowing-making-member-variables-private-considered-a-feature-of-oop
<p>I have read in some tutorials that one of the differences between procedural programming and OOP is that OOP allows you to make member variables <code>private</code>, while in procedural programming you can't make member variables <code>private</code>.</p>
<p>I have also read in other tutorials that allowing making member variables <code>private</code> is not considered a feature of OOP.</p>
<p>So what is the correct answer, is allowing making member variables <code>private</code> considered a feature of OOP or not?</p>
<blockquote>
<p>There are three major features in object-oriented programming that makes them different than non-OOP languages: encapsulation, inheritance and polymorphism.<br>
<a href="https://www.pcmag.com/encyclopedia/term/object-oriented-programming" rel="nofollow noreferrer">pcmag.com: object-oriented-programming</a></p>
</blockquote>
<p>What you're hitting on is encapsulation. Access modifiers, like private, are one way to enable encapsulation. Here's another:</p>
<blockquote>
<pre class="lang-js s-code-block hljs javascript"><code><span class="hljs-keyword">var</span> add = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{counter += <span class="hljs-number">1</span>; <span class="hljs-keyword">return</span> counter}
})();
</code></pre>
<p><a href="https://www.w3schools.com/js/js_function_closures.asp" rel="nofollow noreferrer">w3schools.com - function closures</a></p>
</blockquote>
<p>This closure fully encapsulates the counter var without using any access modifiers. This is functional programming not OOP. So it's unfair to consider encapsulation strictly an OOP feature. Access modifiers simply happen to be the popular way to encapsulate in the OOP leaning languages.</p>
<p>As any decent Python programmer will tell you a simple underscore at the start of a var name can signal that you're poking around in private data. Oh it's not language enforced. It's a convention. But we're all adults here right?</p>
<p>So, "Is allowing making member variables private considered a feature of OOP?" Yes. But it's a feature of far more than just OOP.</p>
<p>Having <strong>private variables</strong> (regardless of language specific keyword) is not specific to OO. A lot of procedural languages allow access control at the level of a module.</p>
<p>Having <strong>member variables</strong> is not specific to OO. A lot of languages allow to define composite data structures.</p>
<p>But combining the two, having <strong>private  member variables</strong>, makes sense only if you have operations related to the data structure with privileged access. So it’s <strong>not a feature of OOP, but a symptom</strong>.</p>
<p>In fact, <strong>treating members as objects</strong>, using only their defined interface, and applying consistently privacy not only to members, but also to members of members, members of members of members, is one of the core feature of OOP, called <strong><a href="https://en.m.wikipedia.org/wiki/Object_composition" rel="nofollow noreferrer">object composition</a></strong>.</p>
<p>No, <code>private</code> is not a feature of OOP, but a feature of the language you are using.</p>
<p>Python is the proof that this is true, which does not have <code>private</code>, but has <em>conventions</em> about naming member variables. Which is still perfectly fine for OOP.</p>
<p>Sounds like a "no true scotsman" argument.</p>
<p>private helps you enforce encapsulation of your data in objects.</p>
<p>encapsulation of data is part of OOP</p>
<p>Having something be “private” means some can access it and others can’t. Who can and can’t access it either depends on context, or must be written down explicitly.</p>
<p>In OOP, we have a context when “private” is used in a class: members of the class can access it, others can’t. A non-OOP language like C would have a problem. A struct can only have data members, and data members cannot access anything. But “private” with a friend declaration would work just fine in C, showing that “private” can be used without OOP.</p>
<p>Encapsulation is also useful without OOP.</p>
<p>Marking things as <code>private</code> is a common part of <em>implementing</em> OOP, or even more correctly <em>facilitating</em> it, rather than a <em>feature</em> of the paradigm.</p>
<p>What OOP says is that there should be something - an "object" - that responds to messages and keeps its internal state hidden (encapsulated) from the rest of the program. A common <em>implementation</em> of that is to have objects be instantiated from some class which has "public methods" (the way of handling "messages" from other parts of the program) and "private members" (the encapsulated state of the object).</p>
<p>So it's true to say that many current "OO languages" allow you to mark members as private; but this is just one way to help you write <em>object-oriented code</em>, which is actually a style of programming rather than a description of any set of language features.</p>
<p>You can achieve the same thing in any language by using naming conventions, module scopes, and whatever other facilities the language offers, to mark which state belongs to which object, and which code should respond to messages sent to that object. For instance, if you define a C struct, and a set of functions that take an instance of that struct and manipulate it in opaque ways, that can be considered "object-oriented", as long as you don't also write code that manipulates the struct directly. The <em>language</em> is not enforcing encapsulation, only your own coding conventions.</p>
<p><code>private</code> is needed mainly in OO languages that want or need the user of a class to have <em>some</em>, but not full knowledge of the implementation.</p>
<p>In C++ it is possible to create objects on the stack. To do so, the calling context needs to know the size of the object, which is (related to) the sum of the size of its members, including <code>private</code> ones.</p>
<p>For optimization, it is also desirable to have <code>inline</code> methods that have access to <code>private</code> members, which also makes it necessary to expose all members inside the public-facing header file, even if they are meant to be inaccessible.</p>
<p>If you allow creation on the heap through a factory method and access through abstract interfaces only, then the user of the class has no need to know the internals, and you could work without access modifiers.</p>
<p>That is still object oriented programming, and in many cases a lot cleaner, but it also has a bit of extra overhead because you need to separate interface and implementation declarations, and any access to the object needs to go through the full dynamic dispatch (which can be costly if you are e.g. sorting an array of objects by the value of a base class data member).</p>
<p>COM is a good example of this: interfaces are defined in IDL files, and the actual implementation is completely hidden. When done correctly, access modifiers can be used but are inconsequential because the only code that ever sees a list of member variables will be member methods.</p>
<p>OO, like every other paradigm, is a way of thinking about the structure of a program, and
doesn't prescribe or mandate the use of any particular programming language features.</p>
<p>Rather than trying to think about OO in terms of programming language features, it could be more useful to consider OO as a set of guidelines/principles and advice on how to separate the behaviour of a program into logically-related groupings of functions and data, with the goal of making code easier to reason about, easier to reuse, easier to unit test, etc.</p>
<p>While it's understandably common (and easier) for a lot of textbooks and courses to explain OO in terms of language syntax, too much focus on language features can distract from the big-picture about program structure.  Indeed, features such as <code>private</code> exist as a tool to encourage OO practice but aren't necessary to enable it; they're also no guarantee that the resulting design will necessarily adhere to OO principles.</p>
<p>For example, a program which excessively violates the <a href="https://martinfowler.com/bliki/TellDontAsk.html" rel="nofollow noreferrer">Tell, Don't Ask</a> principle or uses <a href="https://en.wikipedia.org/wiki/God_object" rel="nofollow noreferrer">God Objects</a> could end up lacking any kind of appropriate logical structure, and probably wouldn't be considered as 'Object Oriented' regardless of the use of classes and private variables.</p>
<p>A procedural language has only access to a field / data member from the <strong>outside</strong>.
But access from outside implies <strong>public</strong>.</p>
<pre class="lang-c s-code-block hljs"><code><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">X</span> {</span> <span class="hljs-keyword">int</span> x; };

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(struct X s)</span> </span>{ s.x = <span class="hljs-number">42</span>; }
</code></pre>
<p>That might be the entire argument: OOP can utilize hidden fields. Valid, but a bit dubious.</p>

domain driven design - Isn't refactor on an existing and fairly new module a normal practice in software product development? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416724/isnt-refactor-on-an-existing-and-fairly-new-module-a-normal-practice-in-softwar
<p>Currently when working in a scrum team in a software service company, who has a clean business <em>domain</em>. I am working on adding new features to an existing module. As the existing module is legacy, and new features need to be integrated to the system all the times, I sometimes feel the need to refactor on the legacy code and also on the new code. For instance, sometimes I would like to just rename a Java class so that it is more close to the business domain.</p>
<p>However, my manager seems not like this at all and get fed up with even my micro-refactor such as renaming one class name or a method name. She tries to persuade me not to do that politely, but I indeed have difficulty to tolerate this as what she suggested are totally against what I have learned from <em>Clean Code</em> and the <em>Domain Driven Development</em>. On the other hand, I understand her worry in that the company's code review process recommends coders to do separate <em>pull requests</em> on actual code change and refactor, but to get separate pull requests merged will take extra time according to the company's code review process</p>
<p><strong>Question</strong>:</p>
<ol>
<li>Should I really follow my manager's command?</li>
<li>Is the company's pull request recommendation proper?</li>
</ol>
<p>IMHO, if I follow her suggestion, the code base will gradually become the rolling <em>big ball of mud</em></p>
<p>There is a danger, when picking up a new skill from a book, blog or video, to go "oh, a shiny new thing!" and use it everywhere.</p>
<p>Resist that temptation.</p>
<p>The problem with bringing new tools like DDD and clean code to an existing shop is that the shop already has a culture and history.  You need to be sensitive to that.  Name changes are especially problematic; the team you're on is already familiar with the names, and they've gotten used to finding things quickly by remembering those names.</p>
<p>Every change I make to a code base is carefully thought out.  Is what I'm about to change going to be a net gain, or a net loss?  For some things, the cost might outweigh the gain.</p>
<p>There are many ways to write good code.  "Clean code" and "TDD" are just two of them.  If you're finding yourself trying to bend the will of an existing code base to the philosophies of Uncle Bob and Eric Evans, first ask yourself: "Is the code already adequate, from an organizational standpoint" and "are the benefits worth the costs?"</p>
<p><strong>Further Reading</strong><br>
<a href="https://softwareengineering.stackexchange.com/a/357746/1204">Are bad programming practices typical within the software industry?
</a></p>
<p><a href="https://norabateson.wordpress.com/2015/11/03/symmathesy-a-word-in-progress/?" rel="nofollow noreferrer">Symmathesy</a> Its worth a read, and even finding a presentation on it by her.</p>
<p>In short the code base is not 100% checked into source control. It also exists in the heads of your fellow developers/business analysts/testors/architects. It is a lot harder to update these parts of the code base.</p>
<p>It is great that you have updated your own internal programming library. Before you apply this to the code though, you will need to update the libraries of your collaborators.</p>
<p>Imagine this scenario:</p>
<p>Frank is a new team and comes from a Functional background (if your functional choose a foreign sounding background). They take a look at your code base and immediately start to apply the rules of DDD and clean code. When you look at the code they have applied monads, functional decomposition, currying and a whole host of strange sounding patterns.</p>
<p>You as an experienced dev have been asked to implement shiny new feature on top of this code, and urgently too. Can you? Probably not, not because you lack experience, but because you have now been asked to read something indistinguishable from ancient greek.</p>
<p>This is essentially what you are forcing onto your colleagues. Your boss is right to ask you not to do this, they have to maintain a team capable of updating this code. They also need to be able to bring on new hands quickly enough to be useful when people move on.</p>
<p>Now if you can improve the code quality, then yes you should improve it. First though you need to be clear about what would improve code quality. Second you need to ensure that the team can still work with the improved code.</p>
<p>At my work we share books on these principles and discuss them. We then pilot a small project with the principles and compare them to what we were doing a year ago. Sometimes we move forward, sometimes we go back. We actively discuss what and how to remodel sections of the code base, and follow up with sessions about what was changed.</p>
<p>One of the most fascinating things I learned when I read Martin Fowler's <em>Refactoring</em> book was how many types of refactors come in pairs, one that is the exact reverse of the other. There aren't any refactors that are universally beneficial. It always depends on the circumstances, and often other developers are aware of circumstances you aren't.</p>
<p>Sometimes the merits of a refactor are not immediately obvious, and you need to make your case. That case shouldn't be something like "DDD says" unless the reviewers are very familiar with DDD. It should be something like, "The old name makes it difficult to tell this concept apart from this other one. This new name is closer to how our customers would refer to this concept in their requirements. This will make it easier for me to make x change I'm planning in a subsequent pull request."</p>
<p>In my experience, most developers with concerns like yours are not making bad changes, they just aren't good at selling them.</p>
<p>Putting it in a separate pull request also has a good reason. It's not just for the sake of bureaucracy. It's easier to review 10 pull requests than one big pull request that should have been 10. If I see a pull request that renames a class, and the author has made a good case for it, I can quickly glance through the changes and see "yep, this is just that rename," and hit approve.</p>
<p>Alternately, if you've stated your reasons well and I'm aware of circumstances you aren't, it's easier for me to correct you. "While your term is more popular broadly, in our particular industry the existing term is more common, for x historical reason." And I can reject the pull request without rejecting other changes I don't disagree with, or feeling like I'm going to make you feel bad.</p>
<p>If that rename is mixed with other changes, I have to painstakingly, line by line, determine if this line changed due to the rename or to something else, or both. If I have objections about the refactor, I may not want to look petty picking on a rename when there are meatier issues to consider, so I have to balance my review. That extra mental effort makes me annoyed about the rename, even if I would have supported it in a separate pull request. It's irrational, but that's how human brains work, and that's one reason why we make the rule about refactors in separate pull requests.  It also feels more important if someone took the time to single it out.</p>
<p>In other words, there are not just technical factors to consider, there are human factors to consider, and you will be more successful if you find ways to help other developers be happy about your changes.</p>
<p>What the books you mentioned don't tell you is how to do get the team on-board with such refactorings.</p>
<p>If you are going to suggest a class or method renaming in a team, the only way of doing it properly is to <strong>ask at least one of the other senior devs</strong> what they think about it, and get a second opinion.</p>
<p>If they are fine with it, tell your manager that you all agree upon this change and make sure the renaming is properly communicated to all people who might have already worked with that part of the code base.</p>

rest - What http codes should i return when user request file which doesn't meet his requirements - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416576/what-http-codes-should-i-return-when-user-request-file-which-doesnt-meet-his-re
<p>i have a case where user can filter and download multiple pdf documents merged into single file.</p>
<p>The client should display an error message when no document's meets the filter, and ask for confirmation when there are many documents because it might take a while to process them (let's say the confirmation should trigger at 10 documents).</p>
<p>For now i've implemented it as described below, but it just seems off.</p>
<pre><code>Request: GET /foo?limit=10
</code></pre>
<p>The results are:</p>
<ul>
<li>Everything is correct: status <code>200 OK</code>, the body would contain download link.</li>
<li>No documents found that are matching the filter: status <code>404 NOT FOUND</code>, empty body</li>
<li>Found more than 10 (requested limit) documents that are matching the filter: <strong>honestly no idea what the status should be</strong>, for now i am returning <code>429 TOO_MANY_REQUESTS</code> but it's not right. The body contain the amount of documents so the user can either abort the operation or create new request with higher limit.</li>
</ul>
<p>Im sure that im missing something important, i have not enough experience in the field. What is <em>the right way</em> of handling this?</p>
<p>Other solutions that i've been thinking about:</p>
<ul>
<li>using custom http codes, but i've come to a conclusion that it's probably a bad idea (even if they are free now, i don't know whether they might be used as official http codes in a year or ten years from now, besides, it feels like an overkill).</li>
<li>each of these situations resulting in <code>200 OK</code> and give more info in the request body</li>
</ul>
<blockquote>
<p>The client should display an error message when no document meets the filter, and ask for confirmation when there are many documents because it might take a while to process them (let's say the confirmation should trigger at 10 documents).</p>
</blockquote>
<p>Both cases are <code>200 OK</code>.</p>
<ul>
<li><code>OK</code>, <code>Foo</code>s resource exists, but I didn't find the subset you are looking for</li>
<li><code>OK</code>, <code>Foo</code>s resource exists, but the subset you are looking for is larger than expected.</li>
</ul>
<blockquote>
<p>each of these situations resulting in 200 OK and give more info in the request body.</p>
</blockquote>
<p>Absolutely</p>
<pre class="lang-json s-code-block hljs"><code><span class="hljs-number">200</span> OK
{ limit:<span class="hljs-number">100</span>, found:<span class="hljs-number">101</span>, link:<span class="hljs-string">"&lt;link&gt;"</span> }
</code></pre>
<p>In both cases (limit exceed or not), there will be a link to follow. Isn't it?</p>
<pre class="lang-json s-code-block hljs"><code><span class="hljs-number">200</span> OK
{ limit:<span class="hljs-number">100</span>, found:<span class="hljs-number">0</span>, link:<span class="hljs-literal">null</span> }
</code></pre>
<p>If no document is processable, then there's no link to show.</p>
<p>In all the above cases the service/API did the job, it worked, the client sent the right input to the right endpoint, there's nothing wrong with that. Don't make things confusing. <code>404</code> is misleading. The developer has to guess whether it's pointing to the right URI or not. <code>400</code> is too, the developer has to guess whether it's missing any important argument.</p>
<p>Use HTTP status codes to communicate with the HTTP client instead of business results to the web application.</p>
<p>We use HTTP status codes to make the HTTP client behave in one way or another. For example, if no confirmation is required we can send <code>302 Redirect</code> and put the download link into the response headers and let the protocol to do its magic. If we want the HTTP client to wait before issuing the redirection, we send the header <code>Retry-After</code> along with the <code>3xx</code> status code. As you may guess, our web app doesn't need to know and understand the semantics of <code>Retry-After</code> the HTTP client does.</p>
<p>As an API consumer I would think that adding ?limit=10 would return the first 10 matching results, not throw an error if there are more than 10 results.</p>
<p>You could consider changing from the limit to an <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect" rel="noreferrer">Expect HTTP request header</a>.</p>
<p>Then if there are more results then expected, return a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/417" rel="noreferrer">417</a></p>
<p>If I am querying an endpoint that returns a list of items, I would not expect an error code in any of these cases. If I request a list of items matching filter X, and there are none, what I expect as return is an empty list. My query is valid, the endpoint exists, the filter exists and I passed an acceptable value to the filter. So my request is well-formed, and the answer in that case is simply that there are no items matching that request. That is a valid answer, not an error.</p>
<p>As for the "too many documents" part. The solution in a typical case would be  to properly paginate the results. So you would return 10 results in this case, with metadata about pagination that indicates whether there are more results available. Then the client can use that metadata to prompt the user.</p>
<p>In your case where you return a merged document this isn't possible. I would separate the endpoints for this purpose entirely, if that works for your application. So the filtering endpoint would return all results (ideally paginated) so that the client knows which documents and how many are in that selection. The second endpoint would take a list of document IDs, and return a merged PDF. The part about warning when too many documents are selected is a concern of the client, not of the web API. Of course you also should set a limit on the server, but that would be a global, not overridable limit to prevent DOSing the system or overloading it accidentally.</p>
<p>I'm making some assumptions here about your case, but from what I read I would find your example API very confusing and the behaviour unexpected.</p>
<blockquote>
<p>The 429 status code indicates that the user has sent too many
requests in a given amount of time ("rate limiting").</p>
</blockquote>
<p><a href="https://tools.ietf.org/html/rfc6585#page-3" rel="nofollow noreferrer">RFC 6568</a> indicates that status 429 should be reserved for rate limiting only. That makes it a very poor status code for indicating too many <em>results</em>. Instead, consider adding an <code>offset</code> parameter to go with the limit. When more than <code>limit</code> documents are available, your API should include a URL to the next page of results (<code>/foo?limit=10&amp;offset=10</code>). If you <em>must</em> decline the request when the limit is too low, I'd recommend a very standard <strong>400 Bad Request</strong>, with more detailed information in the request body.</p>
<p>And while a 404 may be used to indicate there are no documents matching the filter, your API should provide a more detailed status in the response body. After all, the status does not make clear why your API didn't return any results; perhaps the client misspelled the URL, and tried to search on <strong>/goo</strong> instead.</p>
<blockquote>
<p>The client should display an error message when no document's meets the filter, and ask for confirmation when there are many documents because it might take a while to process them (let's say the confirmation should trigger at 10 documents).</p>
</blockquote>
<p>If the final decision rests with the client anyway, who can choose to set the limit to any arbitrary value they want, it'd be easier for you to just always return the link <em>and</em> the information on how many files this link contains.</p>
<p>Instead of sending a confirmation to you, the client can simply look at the returned file count, evaluate it for themselves and decided whether to access the link or not.</p>
<p>This removes the need for the <code>limit</code> input parameter:</p>
<pre><code>Request: GET /foo
</code></pre>
<p>And you simply return your findings to the client:</p>
<pre><code>200 OK
{ files: 250, link:"..." }
</code></pre>
<hr>
<p>What I find counterintuitive about your intended approach is that you put the responsibility of <em>deciding</em> the limit with the client, but your API forces the client to use the decision logic that your API has chosen to implement.</p>
<p>Who says they always care to only process a certain number of files? Even if that is the case today, who says that it's going to be the case tomorrow?</p>
<p>If tomorrow you have a client who only wishes to process a minimum amount of files (instead of a maximum), then you'd need to redevelop your logic and start accounting for all possible decisions that a client could want to make.</p>
<p>Rather than forcing a filter that does not impact your own service, simply return the requested information and let the client decide what to do with the provided information. By returning the file count to them, you leave the decision making process to them, so you don't have to develop every possible evaluation yourself.</p>
<p>This gives you the best of both worlds:</p>
<ul>
<li>Less complexity for you to implement (no confirmation logic etc)</li>
<li>The client can evaluate their own decisions without needing you to update your API. If the client changes how they evaluate things, they don't need to wait for you to update your API logic.</li>
</ul>
<hr>
<p>Just to finish my thought: if the file count does impact the performance of your API, e.g. because it's your API who performs the expensive task of processing the files, then I would expect your API to enforce a reasonable file limit.</p>
<p>It makes no sense to want to defend against something (overloading your server) and then not regulating it yourself and giving the client full control over whether to do so or not.</p>

architecture - DDD in microservices - where to draw the line of responsibility of a microservice? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/416777/ddd-in-microservices-where-to-draw-the-line-of-responsibility-of-a-microservic
<p><strong>TLDR:</strong></p>
<p>If microservice A needs to combine data from services B &amp; C (that are not aware of one another), should B (or C) do the data merging for service A, or it will be up to service A?</p>
<p><strong>In Details</strong></p>
<p>So our retail website has a microservice that is responsible for <code>Products</code> data:</p>
<p>Get products by category, or do a <code>GET</code> for a product ID and get info about the product's (image, price....).</p>
<p>The websites talks to this service to build all kind of "Product Lists" pages for the users - e.g. "Sports Products".</p>
<p>We have a new feature on the website - <code>Hot products</code>, were the website will display a nice list of <em>Hot Products</em> for the user. Imagine a ticker with Hot Products on the checkout page.</p>
<p>So we have a new microservice that is responsible for the business logic of finding what are the relevant products for this specific user and return them to the caller (e.g. Hot products -&gt; productIds: 456, 789).</p>
<p>The business logic of the <code>Hot Products</code> service is less important. We can even imagine that for phase 1 it is: <code>if "morning" then products 123 &amp; 456. If "noon" then products 789 &amp; 3030...</code> and for phase 10 it will be an AI algorithm.</p>
<p>On the website, we need to display more data about the product (name, image, price,....). This data is can be found in the <code>products</code> microservice.</p>
<p><strong>And here comes the question:</strong></p>
<p>Who is responsible to translate the <code>Hot products</code>'s meager IDs recommendations into something that the Website can use?</p>
<p><strong>Option 1</strong> - The <code>Hot products</code> microservice will also take care of that. Instead of returning only a list of IDs, it will also call the <code>Products</code> service in order to bring all the data that is needed by the UI and return a much richer response to the caller.</p>
<p>Drawbacks of option 1 - involving the display/usage business logic of "what needs to be done with the hot products list" into the business logic of the <code>Hot Products</code> microservice. If another caller needs different product information (e.g. brand) the <code>Hot products</code> microservice needs to be changed or at least "know" about it</p>
<p><strong>Option 2</strong> - The <code>Hot products</code> will keep on returning only the IDs of the products, and it is up to the caller's responsibility to do with the data whatever it needs - e.g. calling the <code>Products</code> microservice to bring the data it needs about the different products.</p>
<p>Drawbacks of option 2 - more work on the caller side. No more "one-stop-shop" at the <code>Hot Products</code> microservice.</p>
<p>So where do we draw the line of responsibility or "Domain Driven Development" in such a case?</p>
<p>It is pretty common for one microservice to need data from another microservice to service their consumers (in the form of API responses). Fetching data synchronously couples the two microservices tightly. Leaving it to the consumer to fetch data from another Microservice can lead to chatty APIs and slow response time.</p>
<p>A few conventions to confirm your domain model and push it further to arrive at the solution you are looking for:</p>
<p><strong>Bounded Contexts make good Microservice boundaries</strong>.</p>
<p>One Bounded Context (BC) can contain more than on microservice, but one microservice should never span across BCs. A domain concept makes sense only when considered within a BC. It may mean something else in a different BC.</p>
<p>Your boundaries - Product Management and "Recommendation" Engine- seem to be correct, IMHO.</p>
<p>The concept of <code>Product</code> may mean one thing in the Product Management Microservice but can be subtly different in the <code>Recommendation</code> Microservice. The differences can be structural or behavioral.</p>
<p><strong>Microservices share nothing</strong>.</p>
<p>All data and APIs related to the Microservice are enclosed within it. If another Microservice needs this data, they are exposed as well-defined services (RPC-based communication, for example) or as APIs (REST-based, for example). Accessing another microservice's data via the database is strictly forbidden.</p>
<p><strong>Microservices are connected over a common message channel</strong>.</p>
<p>Data points that are related to multiple microservices are published on a common channel as Events. Interested Microservices have subscribers watching out for the event, pick it, and process it for internal use. In DDD parlance, these are Domain Events.</p>
<p><strong>An Aggregate in one Microservice could be a Value Object in another</strong>.</p>
<p>Product Management BC is the owner of Product-related data. Other microservices may retain/cache portions of that data within their boundaries (like you are doing with Product IDs, in your case).</p>
<p><strong>Read models can be used to serve APIs with different needs</strong>.</p>
<p>You can populate a read model with data prepped and ready to be served in API responses. In your example, you would have a row (or multiple rows) per user in the read model with ready-to-ship data in the Recommendation Microservice.</p>
<p><strong>There can be more than one read model per data structure, as dictated/required by API responses</strong>.</p>
<p>It's perfectly valid to construct and store data in different formats to cater to different APIs. You would use Domain Events with a pub-sub model to populate these read-only data structures in the background.</p>
<p><strong>An API request should be handled in entirety by one single Microservice</strong>.</p>
<p>Unless you are using reactive architectures and you can gather data from microservices in parallel, you are better off dealing with the request within one single Microservice in entirety.</p>
<hr>
<p>So there is a third option of storing a copy of Product data (only what you need) as part of the Recommendation Microservice and using it when constructing the response for <code>Hot Products</code>.</p>
<p>The Product data here is treated as a cache, populated in the background (typically by listening to events being published from the Product Management Microservice), and should be reconstructable in entirety. Most importantly, the Recommendation engine should treat this data as <code>read-only</code>, and not add any additional metadata into it.</p>
<p>Domain Driven Design has Bounded Contexts. Areas within a system that share the same Ubiquitous Language. Words within the context have a specific meaning, which might be (slightly) different outside the context.</p>
<p>Within a Bounded Context, one or more Aggregates exist. Graphs of related objects (Entities and Value Objects) which encapsulate the business rules.</p>
<p>When defining the boundaries of microservices, some people prefer a service per Bounded Contexts and others prefer a service per aggregate root. It will depend on several things, like the number of available teams and the required scalability. A benefit of a service per Bounded Context is that all knowledge of the problem domain is handled by a single team. If the choice is made for a service per Aggregate and there are multiple teams working on different services, a lot of communication is needed between the teams. Because all the services operate within the same Bounded Context, it’s important all teams use the same Ubiquitous Language.</p>
<p>Most applications benefit from fast reads. Users don’t like to wait for a page to load. Writes can be a bit slower; when a user clicks a button they are much more forgiving if it takes a little while.
DDD aggregates often load a lot of data to make the required business decisions. Because of this, it’s best to use the DDD model for writes and use a separate (page specific) read model which does not contain logic, for fast reads.</p>
<p>With all of the above in mind, let’s look at the question.</p>
<p><code>Products</code> and <code>Hot Products</code> most likely belong to the same Bounded Context, assuming they share the Ubiquitous Language.</p>
<p>Therefor it makes sense to combine these features into a single microservice. This will obviously immediately solve the problem, because the API can return Hot Products instead of Hot Product Ids.</p>
<p>We want to make queries fast, so we need a mechanism to determine which products are hot. Let’s assume products which are often bought together with each other are  hot. When someone buys more than 1 product, we update our hot items. Now when we want to display hot items for some product, we can simply query the hot items system for products that are often bought together with the current product. No business logic involved in the query.</p>
<p>If there are good reasons why the Hot Products service cannot be integrated into the Product service, the next logical step would be to integrate at the database level. This conflicts with the principle that each microservice should have it’s own database, but I think it makes sense when both services operate within the same Bounded Context. And let’s be honest, if the Products API is just an HTTP interface for a SQL server, we might just as well query the database directly. Both of the solutions you suggested yourself also have a strong coupling between the two services.</p>
<p>Finally, if you want to keep your current architecture, I would go for your first option. It’s the client that dictates the contract of an API. The client needs Products, not Ids. A <em>service</em> has to make things easier for a client, not harder. Give the client what it needs; return products.</p>
<p><strong>Option 3</strong>: <strong>Go RESTful</strong></p>
<p>You already have a <code>product</code> microservice. Make the microservice <strong>return the HTML</strong>. I.e. make it capable of displaying products.</p>
<p>This would be a huge win, because you no longer need to return "data" and have everybody understand what individual pieces mean, how to display them correctly, etc, you can just <strong>link</strong> to different products, product listings.</p>
<p>This also makes <strong>IDs obsolete</strong>. You don't return IDs, you return URIs. I guess URIs are also IDs, but you get the point.</p>
<p>You can make <code>hot products</code> a different service if you want. The result of which is a <em>link</em> or even a <em>redirect</em> straight to the <code>product</code> microservice for the display.</p>
<p>It's simple and fast, because data is <em>not</em> exchanged, loosely coupled, because services only know URIs, they're essentially integrated through the UI, so they don't really <em>call</em> each other directly. You don't need a message bus, etc.</p>
<p>There is some more info about this here: <a href="https://scs-architecture.org/" rel="nofollow noreferrer">Self-Contained Systems</a>.</p>
<p><strong>TLDR;</strong></p>
<p>From a pragmatic perspective, you may be prematurely spawning a service. But, if you decide you need a new service, the service should provide "essential" value on its own.</p>
<p>Depending on the complexity of the logic, it may be enough of a value-add just to return a list of ID's. Maybe not. In my world, if you've justified spawning a new service, you should be able to justify a full team owning it, and that team should be operating like a small business. The consumers are their customers. Negotiate with your customers.</p>
<p><strong>Pragmatically speaking ...</strong></p>
<p>There are three reasons<sup>1</sup> to spin off a new service, be it <em>micro</em> or otherwise. They're not binary reasons. So, you still need to use some judgement, but generally speaking, you want think about spawning a new service if:</p>
<ol>
<li><p><strong>The interface you're vending will be consumed by multiple other services (or teams).</strong><br>
This is as close to a binary indicator as it gets (even though it's not). When <em>N</em> other services or teams are consuming a feature or interface, the interface needs to scale differently, and the team needs to balance business priorities/requirements independently from any interface <em>not</em> being consumed by exactly those same <em>N</em> consumers. If <code>N &gt; 2</code>, I'd <em>almost</em> call this a binary choice: Spin off a separate team to manage this as a service.</p>
</li>
<li><p><strong>You need to and are able to confine performance degradations and failures around an interface.</strong><br>
If getting the list of "Hot Products" is computationally expensive or buggy and is not an <em>essential</em> aspect of "Products", in your example, it can potentially warrant being its own service. You can protect the more core features from those performance issues with try-catches and timeouts around the service calls, which should be running, failing, and throwing a fit on isolated, independent infrastructure.</p>
</li>
<li><p><strong>For any reason, a full, independent team can build and/or operate the "interface".</strong> <br>
If the business logic is complicated enough for 3 to 8 people to be dedicated to it, it's a signal that the team and service should be independent. Or, if <em>for any other reason</em> the feature/interface has a dedicated team, subteam, or "cluster" of people working on it exclusively, officially or otherwise, it's a signal to bust that service/team out into its own independent thing.</p>
</li>
</ol>
<p><strong>Apart from those signals...</strong> Don't hunt for opportunities to spin up new services where you don't need them. If a feature or interface fits inside an existing service, <em>put it there.</em> If you have your suspicions that the feature/interface might need to be a separate service, code against the interface <em>as though</em> it were a separate service ... if the time comes to form a new team around it, the original consuming service will be easy to update, and the feature will by easy move out.</p>
<p><strong>The reasons you spawn a new service to begin with signal how to define boundaries.</strong> (Again, pragmatically speaking.) Each service should be owned and operated as an independent micro-business. The owner/operator should operate it as such. The consumers of the service are your customers. It's each service owner's job to stay in business ... Negotiate your service boundaries and interfaces accordingly.</p>
<p><sup>1. <strong>There is one notable caveat.</strong> My "three signals" assume you're agonizing over the decision to spin off a <em>related</em> and <em>relevant</em> feature or interface into a new service. If the thing you're wondering about is literally unrelated to any existing service, you have my permission to make it its own service ...</sup></p>

binary - Why is the bitwise AND of 1 and any even number equal to 0? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/417916/why-is-the-bitwise-and-of-1-and-any-even-number-equal-to-0
<p>I’m curious as to why the bitwise AND of any even number with 1 is equal to 0? I’ve looked at the binary representations of an odd number and 1, and have found that the following is always true for any odd number:</p>
<pre><code>00101 (5)
00001 (1)
5 &amp; 1 != 0

00100 (4)
00001 (1)
4 &amp; 1 = 0
</code></pre>
<p>The least significant bit is always 1 for any odd number, and always 0 for any even number.</p>
<p>Why is this true? Does anyone have an explanation for this behavior?</p>
<h3>First, looking at decimal</h3>
<p>In base 10, we can easily determine the parity of an integer (whether it is even or odd), by looking at the parity of the last digit:</p>
<ul>
<li>If a base 10 numbers ends in <code>0</code>, <code>2</code>, <code>4</code>, <code>6</code>, <code>8</code>, we know it's even.</li>
<li>If it ends in <code>1</code>, <code>3</code>, <code>5</code>, <code>7</code> or <code>9</code>, we know it's odd.</li>
</ul>
<p>This works because all higher powers of <code>10</code> (i.e. <code>10^n</code> for n &gt; 1) are <em>all</em> divisible by 2, since they're all divisible by 10 (and because 10 is divisible by 2). I.e. any number of hundreds, thousands, ten thousands, etc. are always even. It's the last digit that can introduce an indivisible portion to the number.</p>
<h3>Relating back to binary</h3>
<p>In base 2, it works much the same way. All higher powers of <code>2</code> are always even (<code>2</code>, <code>4</code>, <code>8</code>, ...). The parity is decided soley by the last bit:</p>
<ol>
<li>If it's <code>0</code>, that means the binary has the form of <code>something_divisible_by_2 + 0</code>, which means it's still divisible by two, thus even.</li>
<li>If it's <code>1</code>, that means the binary has the form of <code>something_divisible_by_2 + 1</code>, which makes the whole integer no longer divisible by two, thus odd.</li>
</ol>
<h3>Relating back to your problem</h3>
<p>From what we see above, we know that if you take an odd number, as you did, that means that its last bit is always <code>0</code>.</p>
<p>When then have the integer <code>1</code>, whose binary representation is <code>0...00001</code>. Lets take all the bit positions except the last one, and call it the "tail".</p>
<p>The "tail" of the binary representation of <code>1</code> is all zeros. Since <code>0 &amp; anything</code> is always <code>0</code>, we know that <code>1 &amp; anything</code> will always have a tail of all zeros.</p>
<p>The last bit's value is the AND of the last bit (least significant bit, LSB) of our odd number (which we saw will always be <code>0</code>), with the last bit of <code>1</code>, which is always <code>1</code>.</p>
<pre><code>0b10101010101010 (10,922) - Always has a `0` LSB
0b00000000000001 (     1) - Always has an all-zero tail, and a `1` LSB
---------------&amp;----
0b00000000000000 (     0)
  └─────┬─────┘│
        │      └─ LSB is always `0` because of `0 AND 1` of LSBs
        └─ Tail is always zero because of the all-zero tail of `1`
</code></pre>
<p>Thus, the entire result is always only zeros.</p>
<p>To see why, let's start by finishing the AND operation and viewing the results in binary:</p>
<pre><code>00101 (5)
00001 (1)
-----&amp;
00001 (1)
</code></pre>
<hr>
<pre><code>00100 (4)
00001 (1)
-----&amp;
00000 (0)
</code></pre>
<p>When we AND a variable (here 4 vs. 5) with a specific constant (here 1), we sometimes refer to the constant as a mask.&nbsp; The mask here is 1 decimal, or in your example in 5 bits binary, is 00001.&nbsp; The AND operation clears bits where the mask has 0's and keeps bits from the variable where the mask has 1's.&nbsp; The only 1 bit in the mask is the least significant bit, so that bit value of the variable is transferred into the result, with all other bits cleared to zero.</p>
<p>The least significant bit in binary represents the ones position, and when the one's position is false, the number is even and when it is true, the number is odd.</p>
<p>I'm not sure whether I'm covering the same ground as the existing answers, but cast your mind back to learning Hundreds, Tens, and Units in primary school.</p>
<p>That system, in which there are ten different number symbols available to use (the Arabic numerals, 0 to 9), and each column (proceeding from right to left) is worth ten times the value as the column preceding, relates to the decimal system. So 125 (one hundred and twenty five) consists of 1 hundreds, 2 tens, and 5 units.</p>
<p>The binary system employs exactly the same principle, except that there are only two number symbols employed (0 and 1), and each column is merely worth twice the value as the column preceding.</p>
<p>So the first four columns in binary are 8, 4, 2, and 1 - eights, fours, twos, and units. And you can have either zero or one in each of these columns. 1000 in binary is equivalent to 8 in decimal, because there is a 1 in the 8s column.</p>
<p>Decimal 6 expressed in binary would be 110 - 1 in both the fours and the twos column. Decimal 4 would be binary 100 - a 1 in the fours column. Decimal 2 is binary 10 - a 1 in the twos column.</p>
<p>Now, it should be possible to see why an even number in binary, never has a 1 in the units column. Only odd numbers need to employ the units column, because all even numbers in binary are composed of one or more of the higher columns.</p>
<p>The equivalent principle in decimal would be the distinction between "round" and "non-round" numbers. A round number which is a multiple of 10, never needs to use the decimal units column, it always contains zero. Only non-round numbers, like 11, have anything other than a zero in the decimal units column. Evens are the "round" numbers of binary which don't use the units column, whilst odds are the "non-round" numbers which do use the units column.</p>
<p>So after that short walkthrough of binary numbers, you ask "why the bitwise AND of any even number with 1 is equal to 0?".</p>
<p>The answer is that the number 1, by definition (and in any number system), only employs a 1 in the units column. Any even number in binary, however, does not employ the units column, because any even number is "round" in binary.</p>
<p>So by ANDing 1 with an even number, you are ANDing a number which has just a single 1 in the units column, with another number which <em>never</em> has a 1 in the units column. The result of the AND operation must therefore always be 0 by definition, because no even number will ever have a 1 in the units column, and the number 1 will never have a 1 in any column other than the units column.</p>
<p>It is true, because an odd number's least significant bit is 1 and therefore you'll always end up getting a not zero number.</p>
<p>The second is true because even number's least significant bit is 0 and all other bits of 1 are zeros therefore the result must be zero.</p>
<blockquote>
<p>Why is this true? Does anyone have an explanation for this behavior?</p>
</blockquote>
<h2>Number parity in binary</h2>
<p>In any number in any base, the rightmost digit is always equal to the remainder when dividing a number by its base.</p>
<p>As a simple example, using base 10, pick a random number (no matter how big), divide by 10, and take the remainder. Every time, the rightmost digit of the number you picked is the same as the remainder.</p>
<pre><code>61398643861898841835 % 10 = 5
</code></pre>
<p>I didn't need to calculate this. I just looked at the last digit of the number I randomly typed in, and knew conclusively that that was the remainder.</p>
<p>We divided by 10 in the above example because you picked a number in base 10. But since your question is about binary numbers, we're working in base 2, so we'd have to divide the number by 2.</p>
<p>The parity of a number (= it being even or odd) is essentially the same as asking if it can be divided by two without a remainder. Therefore, "does this number have a remainder when divided by two?" is the same as asking "is this number odd?"</p>
<p>The conclusion here is that when written in binary, the rightmost digit of a number is 0 when the number is even, and 1 when the number is odd.</p>
<p>Therefore, we can state that even numbers in binary always follow the pattern <code>???0</code>, where <code>?</code> represents an unknown value. We know that the last digit is a <code>0</code> because the number is even.</p>
<h2>The number 1 in binary</h2>
<p>Not much needs to be said here. The number one in binary is just <code>1</code>, or, using our earlier number format, <code>0001</code>.</p>
<h2>AND logic</h2>
<p>The AND table is fairly straightforward. The result is true only if <strong>both</strong> inputs are true.</p>
<p><em>Note that true is the same as 1, and false is the same as 0.</em></p>
<pre><code> A | B | Output
----------------
 0 | 0 | 0
 1 | 0 | 0
 0 | 1 | 0
 1 | 1 | 1
</code></pre>
<p>So let's try a thought experiment. Can you tell me the output if I don't tell you what <code>B</code> is? Since we don't know the value of B, I'll use <code>?</code> to represent that unknown value.</p>
<p>Let's examine both options. Assume A is true:</p>
<pre><code>1 AND ? = ...
</code></pre>
<p>You cannot actually know the outcome here. Depending on B being true or false, the output will change.</p>
<p>Let's assume A is false:</p>
<pre><code>0 AND ? = ...
</code></pre>
<p>Here, you can actually be sure. It's impossible for AND to output true when <em>any</em> of its inputs is false. Since we know that at least one of them (A) is false, we can therefore state that the output is always going to be false, <strong>regardless of the value of the other input (B)</strong>. No matter whether B is true or false, this is not going to change the output.</p>
<p>You can confirm this by looking at the table above. In all cases where A is 0, the output is also 0. There is not a single case where the output is 0</p>
<h2>Binary number AND</h2>
<p>When you <code>&amp;</code> two binary numbers, what you're really doing is performing an AND operation between the respective digits.</p>
<p>If you take number <code>ABCD</code> and <code>EFGH</code> (where each letter represents a binary bit) and you <code>&amp;</code> them together, the result will be a four digit number which we'll call <code>IJKL</code>. The value of these four digits will be:</p>
<pre><code>I = A AND E
J = B AND F
K = C AND G
L = D AND H
</code></pre>
<p>Now let's go back to our two numbers.</p>
<ul>
<li>The first number is an even number, so we know it's <code>???0</code></li>
<li>The second number is 1, so we know it's <code>0001</code></li>
</ul>
<p>So what is the result of performing <code>&amp;</code> on these numbers? Well, just like we did with the letters above, the result is going to be a 4 digit number (which I'll call <code>MNOP</code>), and we know how to calculate each of its digits:</p>
<pre><code>M = ? AND 0
N = ? AND 0
O = ? AND 0
P = 0 AND 1
</code></pre>
<p>Remember what we concluded about AND logic: if <em>any</em> of the inputs is false/0, then we conclusively know that the output will also be false/0.</p>
<p>Even though we still have some unknown values in our above calculations, we can already see that every &amp; calculation has at least one 0 in it. Therefore, we can conclude that every calculation's outcome is going to be 0.</p>
<p>This means that number <code>MNOP</code> will <strong>always</strong> be <code>0000</code>, when one of the inputs was an even number, and the other input was equal to 1.</p>
<p>Visually speaking:</p>
<pre><code>  xxxxxxx|0| - EVEN   *     xxxxxxx|1| - ODD
&amp; 0000000|1|          *   &amp; 0000000|1|
---------|-|          *   ------------
  0000000|0| = 0      *     0000000|1| = 1
</code></pre>

communication - Why do MMS require "mobile data" to be sent/received? - Software Engineering Stack Exchange | https://softwareengineering.stackexchange.com/questions/418195/why-do-mms-require-mobile-data-to-be-sent-received
<p>First, I am not sure where to ask this. Please point me the correct stack exchange if it does not belong here.</p>
<p>Note: I do not know how to correctly name "mobile data" in english. But I refer to 3G/4G/etc.</p>
<p>To send or receive a MMS (Multimedia Messaging Service), I need to activate mobile data on my phone, even if I am connected to a network via Wifi.</p>
<p>Why is it required ? Why can't we use MMS via Wifi ? Depending on the type of subscription you have, it would be less expensive to use Wifi than mobile data, at least for the customer.</p>
<p>MMS was conceived as a way of adding multimedia capabilities to SMS, not as an internet messaging platform. It uses a set of technologies which made sense in the mobile ecosystem of the time, but are definitely not how you'd design it today</p>
<p>In particular, it is built entirely on top of <a href="https://en.wikipedia.org/wiki/Wireless_Application_Protocol" rel="noreferrer">WAP</a>, an internet connection protocol that has otherwise been completely superseded. Every part of the process is standardised around handsets connecting directly to their carrier's servers over WAP, not via any other internet connection.</p>
<p>While it would be possible to build an "MMS over TCP/IP" protocol, there would be little motivation to do so: the expense for the carriers is maintaining the complicated services which store, forward, and re-encode the messages, and the original protocol would still need to be supported for older handsets.</p>
<p>There have been attempts to replace both SMS and MMS with a more modern protocol, notably <a href="https://en.wikipedia.org/wiki/Rich_Communication_Services" rel="noreferrer">RCS</a>, but it is hard to compete with services like WhatsApp which don't need the investment from carriers to implement.</p>
<p>For the same reason you cannot send SMS over Wifi, it's a protocol for sending "Multimedia Messages" over the cellular phone networks (<a href="https://en.wikipedia.org/wiki/Multimedia_Messaging_Service" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Multimedia_Messaging_Service</a>). When MMS was first conceived publicly available Wi-fi was less common than cellular phone connectivity, so it was a way to send those messages without needing internet access.</p>
<p>Sometimes this distinction has been blurred by carriers and device providers, who provided hybrid solutions where sending an MMS to a number would forward it to an email or vice versea</p>
<blockquote>
<p>Why is it required ? Why can't we use MMS via Wifi ? Depending on the type of subscription you have, it would be less expensive to use Wifi than mobile data, at least for the customer.</p>
</blockquote>
<p>Ultimately, these services are provided to make money for the mobile phone carriers.</p>
<p>If you want to send MMS messages over the phone network, then you have to buy a data plan from your phone provider.  It is of no benefit to the provider to allow you to send MMS messages via WiFi when you are near a hotspot.</p>

